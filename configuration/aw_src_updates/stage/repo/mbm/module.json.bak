{
  "name": "mbm",
  "description": "",
  "type": [
    "native"
  ],
  "srcDir": "src_native",
  "pathOffset": ".",
  "skipAudit": true,
  "skipTest": true,
  "version": "6.1.3",
  "author": "Siemens Product Lifecycle Management Software Inc.",
  "themeExtensions": [
    "mbmTheme"
  ],
  "commandsViewModel": {
    "schemaVersion": "1.0.0",
    "commands": {
      "openInMbmAlignPage": {
        "iconId": "cmdOpen",
        "title": "{{i18n.openInMbmAlignPageTitle}}",
        "description": "{{i18n.openInMbmAlignPageDesc}}"
      },
      "openMBMAlignmentCommandForTaskSwither": {
        "iconId": "miscTaskAlignEBOM_MBOM",
        "title": "{{i18n.mbmAlignEBOMMBOMTitle}}",
        "extendedTooltip": {
          "view": "mfeGenericTooltip",
          "title": "{{i18n.mbmAlignEBOMMBOMTitle}}",
          "messages": [
            "{{i18n.mbmAlignEBOMMBOMTileDescription}}",
            "{{i18n.mbmAlignEBOMMBOMTileCriteria}}"
          ]
        }
      },
      "openMBMAlignmentTaskForManagePageCommand": {
        "iconId": "miscTaskAlignEBOM_MBOM",
        "title": "{{i18n.mbmAlignEBOMMBOMTitle}}",
        "extendedTooltip": {
          "view": "mfeGenericTooltip",
          "title": "{{i18n.mbmAlignEBOMMBOMTitle}}",
          "messages": [
            "{{i18n.mbmAlignEBOMMBOMTileDescription}}",
            "{{i18n.mbmAlignEBOMMBOMTileCriteria}}"
          ]
        }
      },
      "mbmFocusCommand": {
        "iconId": "cmdFocusOnScope",
        "title": "{{i18n.mbmFocusOffCommandTitle}}",
        "isGroup": false,
        "extendedTooltip": {
          "view": "mbmFocusTooltip"
        },
        "isToggle": true
      },
      "mbmEbom3DLayoutCommand": {
        "iconId": "cmdShowPanelBottom",
        "title": "{{i18n.mbm3DBottomLayoutCommandTitle}}",
        "description": "{{i18n.mbm3DBottomLayoutCommandDesc}}",
        "isShuttle": true,
        "isToggle": false
      },
      "mbmMbom3DLayoutCommand": {
        "iconId": "cmdShowPanelBottom",
        "title": "{{i18n.mbm3DBottomLayoutCommandTitle}}",
        "description": "{{i18n.mbm3DBottomLayoutCommandDesc}}",
        "isShuttle": true,
        "isToggle": false
      },
      "mbmEbom3DBottomLayoutCommand": {
        "iconId": "cmdShowPanelBottom",
        "title": "{{i18n.mbm3DBottomLayoutCommandTitle}}",
        "description": "{{i18n.mbm3DBottomLayoutCommandDesc}}"
      },
      "mbmEbom3DSideLayoutCommand": {
        "iconId": "cmdShowPanelRight",
        "title": "{{i18n.mbm3DSideLayoutCommandTitle}}",
        "description": "{{i18n.mbm3DSideLayoutCommandDesc}}"
      },
      "mbmMbom3DBottomLayoutCommand": {
        "iconId": "cmdShowPanelBottom",
        "title": "{{i18n.mbm3DBottomLayoutCommandTitle}}",
        "description": "{{i18n.mbm3DBottomLayoutCommandDesc}}"
      },
      "mbmMbom3DSideLayoutCommand": {
        "iconId": "cmdShowPanelRight",
        "title": "{{i18n.mbm3DSideLayoutCommandTitle}}",
        "description": "{{i18n.mbm3DSideLayoutCommandDesc}}"
      },
      "mbmScopeCommand": {
        "iconId": "cmdAssociateAssignmentScope",
        "title": "{{i18n.mbmScopeCommandTitle}}",
        "description": "{{i18n.mbmScopeCommandDesc}}",
        "isGroup": false,
        "isToggle": false
      },
      "mbmRemoveScopeCommand": {
        "iconId": "cmdUnassociateAssignmentScope",
        "title": "{{i18n.mbmRemoveScopeCommandTitle}}",
        "description": "{{i18n.mbmRemoveScopeCommandDesc}}",
        "isGroup": false,
        "isToggle": false
      },
      "mbmShowEbom3DViewerCommand": {
        "iconId": "cmdSummaryView",
        "title": "{{i18n.mbmShowSummaryTitle}}",
        "description": "{{i18n.mbmShowEbomSummaryCommandTooltipDescription}}",
        "isToggle": false
      },
      "mbmShowMbom3DViewerCommand": {
        "iconId": "cmdSummaryView",
        "title": "{{i18n.mbmShowSummaryTitle}}",
        "description": "{{i18n.mbmShowMbomSummaryCommandTooltipDescription}}",
        "isToggle": false
      },
      "mbmHide3DViewerCommand": {
        "iconId": "cmdHideSummaryView",
        "title": "{{i18n.mbmHideSummaryCommandTitle}}",
        "description": "{{i18n.mbmHideSummaryCommandTooltipDescription}}",
        "isToggle": false
      },
      "assignFromEbomToMbomCommand": {
        "iconId": "cmdValidate",
        "title": "{{i18n.assignFromEbomToMbomCommandTitle}}",
        "description": "{{i18n.assignFromEbomToMbomCommandToolTipDescription}}"
      },
      "mbmRemoveCommand": {
        "iconId": "cmdRemove",
        "isGroup": false,
        "title": "{{i18n.mbmRemove}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        }
      },
      "addMfgPartOrMfgAssemblyCommand": {
        "iconId": "cmdNew",
        "title": "{{i18n.addMfgPartOrMfgAssemblyCommandTitle}}",
        "description": "{{i18n.addMfgPartOrMfgAssemblyCommandToolTipDescription}}",
        "isGroup": true,
        "isToggle": false
      },
      "mbmCreateMfgPartOrMfgAssemblyCommand": {
        "iconId": "cmdNew",
        "title": "{{i18n.mbmCreateMfgPartOrMfgAssemblyCommandTitle}}"
      },
      "mbmStartEditTable": {
        "iconId": "cmdEdit",
        "isGroup": false,
        "title": "{{i18n.Awp0StartEditTableTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmMbomSaveEditGroupPrimaryWorkArea": {
        "iconId": "cmdSave",
        "isGroup": true,
        "title": "{{i18n.saveEditsTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmHandleMismatch": {
        "iconId": "cmdCompareRevisions",
        "isGroup": true,
        "title": "{{i18n.handleMismatchTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmManage": {
        "iconId": "cmdManage",
        "isGroup": true,
        "title": "{{i18n.manageTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmAssignmentScope": {
        "iconId": "cmdAssociateAssignmentScope",
        "isGroup": true,
        "title": "{{i18n.assignmentScopeTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmMbomSaveEditsPWA": {
        "iconId": "cmdSave",
        "isGroup": false,
        "title": "{{i18n.saveEditsTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmMbomCancelEditsPWA": {
        "iconId": "cmdCancelEdit",
        "isGroup": false,
        "title": "{{i18n.cancelEditsTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmImpactOfChangeCommand": {
        "iconId": "cmdShowImpactOfChange",
        "isGroup": false,
        "title": "{{i18n.mbmManufacturingImpact}}",
        "description": "{{i18n.mbmManufacturingImpactTooltipDescription}}",
        "isToggle": false
      },
      "mbmMfgCNPopupCloseCommand": {
        "iconId": "cmdClosePanel",
        "isGroup": false,
        "title": "{{i18n.mbmClose}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmAssociateChangeNoticeCommand": {
        "iconId": "cmdLinkToChangeNotice",
        "isGroup": false,
        "title": "{{i18n.mbmAssociateChangeNoticeTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmNavigateWorkpackageFromMfgImpactedCNPopupCommand": {
        "iconId": "cmdOpen",
        "isGroup": false,
        "title": "{{i18n.Awp0ShowObjectTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmReviseCommand": {
        "iconId": "cmdRevise",
        "title": "{{i18n.mbmReviseCommandToolTip}}"
      },
      "mbmAlignCommand": {
        "iconId": "cmdAlign",
        "title": "{{i18n.mbmAlignCommandTitle}}",
        "extendedTooltip": {
          "view": "mfeGenericTooltip",
          "title": "{{i18n.mbmAlignCommandTitle}}",
          "messages": [
            "{{i18n.mbmAlignCommandDesc}}",
            "{{i18n.mbmAlignCommandtext}}"
          ]
        },
        "isGroup": false
      },
      "mbmSubmitToWorkflowCommand": {
        "iconId": "cmdSubmitToWorkflow",
        "title": "{{i18n.Workflow_Title}}"
      },
      "mbmPullPropagateCommand": {
        "iconId": "cmdUpdateAssignedRevision",
        "title": "{{i18n.mbmUpdateInMbom}}",
        "description": "{{i18n.mbmUpdateInMbomTooltip}}"
      },
      "mbmCompareCommand": {
        "iconId": "cmdCompareRevisions",
        "title": "{{i18n.mbmCompareToEbom}}",
        "description": "{{i18n.mbmCompareToEbomTooltip}}"
      },
      "mbmOccEffectivityCommand": {
        "iconId": "cmdOpenSharedEffectivity",
        "title": "{{i18n.elementEffectivityTitle}}",
        "description": "{{i18n.Awb0OccurrenceEffectivityDesc}}"
      },
      "mbmFindInEBomCommand": {
        "iconId": "cmdSearch",
        "title": "{{i18n.mbmFindInEBOM}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmFindInMBomCommand": {
        "iconId": "cmdSearch",
        "title": "{{i18n.mbmStructureSearchMbomPanelTitle}}",
        "extendedTooltip": {
          "view": "extendedTooltipDefault"
        },
        "isToggle": false
      },
      "mbmEbomPartialCompareCommand": {
        "iconId": "cmdIndicateAllocationState",
        "title": "{{i18n.mbmPartialCompareTitle}}",
        "extendedTooltip": {
          "view": "mfeGenericTooltip",
          "title": "{{i18n.mbmPartialCompareTitle}}",
          "messages": [
            "{{i18n.mbmPartialCompareTooltipDescription}}"
          ]
        }
      },
      "mbmMbomPartialCompareCommand": {
        "iconId": "cmdIndicateAllocationState",
        "title": "{{i18n.mbmPartialCompareTitle}}",
        "extendedTooltip": {
          "view": "mfeGenericTooltip",
          "title": "{{i18n.mbmPartialCompareTitle}}",
          "messages": [
            "{{i18n.mbmPartialCompareTooltipDescription}}"
          ]
        }
      },
      "mbmCutContextMenuCommand": {
        "iconId": "cmdCut",
        "title": "{{i18n.Awp0CutTitle}}",
        "description": "{{i18n.mbmCutDesc}}",
        "isGroup": false,
        "isToggle": false
      },
      "mbmCopyContextMenuCommand": {
        "iconId": "cmdCopy",
        "title": "{{i18n.Awp0CopyTitle}}",
        "description": "{{i18n.mbmCopyDesc}}",
        "isGroup": false,
        "isToggle": false
      },
      "mbmPasteAfterCutContextMenuCommand": {
        "iconId": "cmdPaste",
        "title": "{{i18n.Awp0PasteGroup}}",
        "description": "{{i18n.mbmPasteAsRefDesc}}",
        "isGroup": false,
        "isToggle": false
      },
      "mbmPasteAfterCopyContextMenuCommand": {
        "iconId": "cmdPaste",
        "title": "{{i18n.mbmCopyPaste}}",
        "description": "{{i18n.mbmPasteAsRefDesc}}",
        "isGroup": false,
        "isToggle": false
      },
      "mbmCreateMCNCommand": {
        "iconId": "cmdNew",
        "isGroup": false,
        "title": "{{i18n.mbmCreateMCNCommandTitle}}",
        "description": "{{i18n.mbmCreateMCNCommandTitle}}",
        "isToggle": false
      },
      "mbmTaskbarFullScreen": {
        "iconId": "uiFullScreen",
        "title": "{{i18n.taskbarFullScreen}}",
        "description": "{{i18n.Awp0TaskbarFullScreenDesc}}"
      },
      "mbmTaskbarExitFullScreen": {
        "iconId": "uiExitFullScreen",
        "title": "{{i18n.taskbarFullScreenExit}}",
        "description": "{{i18n.Awp0TaskbarExitFullScreenDesc}}"
      },
      "mbmValidateEffectivityCommand": {
        "iconId": "cmdValidateEffectivityCoverage",
        "title": "{{i18n.mbmValidateEffectivityTitle}}",
        "description": "{{i18n.mbmValidateEffectivityDesc}}"
      },
      "mbmUnifiedInContextSearch": {
        "iconId": "cmdSearch",
        "title": "{{i18n.InContextSearchTitle}}",
        "description": "{{i18n.InContextSearchDesc}}"
      },
      "mbmUpdateEquivalentAssignmentDomainsCmd": {
        "iconId": "cmdUpdateEquivalentAssignmentScopes24",
        "title": "{{i18n.updateEquivalentAssignmentDomainsTitle}}",
        "description": "{{i18n.updateEquivalentAssignmentDomainsDesc}}"
      },
      "mbmCheckoutContextMenu": {
        "iconId": "cmdCheckout",
        "title": "{{i18n.checkoutTitle}}",
        "description": "{{i18n.Awp0CheckoutDesc}}"
      },
      "mbmCheckinContextMenu": {
        "iconId": "cmdCheckin",
        "title": "{{i18n.checkinTitle}}",
        "description": "{{i18n.Awp0CheckinDesc}}"
      },
      "mbmCancelCheckoutContextMenu": {
        "iconId": "cmdCancelCheckout",
        "title": "{{i18n.cancelCheckoutTitle}}",
        "description": "{{i18n.Awp0CancelCheckoutDesc}}"
      },
      "mbmCreateBasedOnCommand": {
        "iconId": "cmdCreateOccurrence",
        "title": "{{i18n.CreateBasedOnTitle}}",
        "extendedTooltip": {
          "view": "mfeGenericTooltip",
          "title": "{{i18n.CreateBasedOnTitle}}",
          "messages": [
            "{{i18n.mbmCreateBasedOnTooltipDescription}}"
          ]
        }
      }
    },
    "commandPlacements": {
      "mbmObjectNavigationOneStepCommandPlacement": {
        "id": "openInMbmAlignPage",
        "uiAnchor": "ep_commandBarRightSlot",
        "priority": 999
      },
      "mbmHoverMenuCommandPlacement": {
        "id": "epNavigationHoverMenuWithAssociatedProcessCheckCommand",
        "uiAnchor": "mbom_hoverMenu",
        "priority": 1
      },
      "openMBMAlignmentCommandForTaskSwitherPlacement": {
        "id": "openMBMAlignmentCommandForTaskSwither",
        "parentGroupId": "openEpTasksCommand",
        "uiAnchor": "epTasks_uiAnchor",
        "priority": 4
      },
      "openMBMAlignmentManagePagePlacement": {
        "id": "openMBMAlignmentTaskForManagePageCommand",
        "uiAnchor": "epTasksForManagePage_uiAnchor",
        "priority": 1
      },
      "mbmFocusCommandPlacement": {
        "id": "mbmFocusCommand",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 200
      },
      "mbmEbom3DLayoutCommandPlacement": {
        "id": "mbmEbom3DLayoutCommand",
        "uiAnchor": "mbm_ebomGraphics_uiAnchor",
        "priority": 100
      },
      "mbmEbomOverviewCommandPlacement": {
        "id": "mbmEbom3DLayoutCommand",
        "uiAnchor": "mbm_ebomOverview_uiAnchor",
        "priority": 100
      },
      "mbmMbomOverviewCommandPlacement": {
        "id": "mbmMbom3DLayoutCommand",
        "uiAnchor": "mbm_mbomOverview_uiAnchor",
        "priority": 100
      },
      "mbmMbom3DLayoutCommandPlacement": {
        "id": "mbmMbom3DLayoutCommand",
        "uiAnchor": "mbm_mbomGraphics_uiAnchor",
        "priority": 100
      },
      "mbmEbom3DBottomLayoutCommandPlacement": {
        "id": "mbmEbom3DBottomLayoutCommand",
        "uiAnchor": "mbm_ebomGraphics_uiAnchor",
        "priority": 1,
        "parentGroupId": "mbmEbom3DLayoutCommand"
      },
      "mbmEbom3DSideLayoutCommandPlacement": {
        "id": "mbmEbom3DSideLayoutCommand",
        "uiAnchor": "mbm_ebomGraphics_uiAnchor",
        "priority": 2,
        "parentGroupId": "mbmEbom3DLayoutCommand"
      },
      "mbmEbomOverviewBottomLayoutCommandPlacement": {
        "id": "mbmEbom3DBottomLayoutCommand",
        "uiAnchor": "mbm_ebomOverview_uiAnchor",
        "priority": 1,
        "parentGroupId": "mbmEbom3DLayoutCommand"
      },
      "mbmEbomOverviewSideLayoutCommandPlacement": {
        "id": "mbmEbom3DSideLayoutCommand",
        "uiAnchor": "mbm_ebomOverview_uiAnchor",
        "priority": 2,
        "parentGroupId": "mbmEbom3DLayoutCommand"
      },
      "mbmMbomOverviewBottomLayoutCommandPlacement": {
        "id": "mbmMbom3DBottomLayoutCommand",
        "uiAnchor": "mbm_mbomOverview_uiAnchor",
        "priority": 1,
        "parentGroupId": "mbmMbom3DLayoutCommand"
      },
      "mbmMbomOverviewSideLayoutCommandPlacement": {
        "id": "mbmMbom3DSideLayoutCommand",
        "uiAnchor": "mbm_mbomOverview_uiAnchor",
        "priority": 2,
        "parentGroupId": "mbmMbom3DLayoutCommand"
      },
      "mbmMbom3DBottomLayoutCommandPlacement": {
        "id": "mbmMbom3DBottomLayoutCommand",
        "uiAnchor": "mbm_mbomGraphics_uiAnchor",
        "priority": 1,
        "parentGroupId": "mbmMbom3DLayoutCommand"
      },
      "mbmMbom3DSideLayoutCommandPlacement": {
        "id": "mbmMbom3DSideLayoutCommand",
        "uiAnchor": "mbm_mbomGraphics_uiAnchor",
        "priority": 2,
        "parentGroupId": "mbmMbom3DLayoutCommand"
      },
      "mbmScopeCommandPlacement": {
        "id": "mbmScopeCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 51,
        "parentGroupId": "mbmAssignmentScope"
      },
      "mbmRemoveScopeCommandPlacement": {
        "id": "mbmRemoveScopeCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 52,
        "parentGroupId": "mbmAssignmentScope"
      },
      "mbmShowEbom3DViewerCommandPlacement": {
        "id": "mbmShowEbom3DViewerCommand",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 500
      },
      "mbmShowMbom3DViewerCommandPlacement": {
        "id": "mbmShowMbom3DViewerCommand",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 500
      },
      "mbmHide3DViewerCommandPlacement": {
        "id": "mbmHide3DViewerCommand",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 500
      },
      "mbm3DViewerFullScreenPlacement": {
        "id": "Awp0FullScreen",
        "uiAnchor": "aw_toolbarRight",
        "priority": 1
      },
      "mbm3DViewerExitFullScreenPlacement": {
        "id": "Awp0ExitFullScreen",
        "uiAnchor": "aw_toolbarRight",
        "priority": 1
      },
      "mbmExpandCommandPlacement": {
        "id": "Awb0Expand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 48
      },
      "mbmValidateEffectivityPlacement": {
        "id": "mbmValidateEffectivityCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 300
      },
      "mbmAlignCommandPlacement": {
        "id": "mbmAlignCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 400,
        "parentGroupId": "mbmManage"
      },
      "mbmReviseCommandPlacement": {
        "id": "mbmReviseCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 500,
        "parentGroupId": "mbmManage"
      },
      "submitToWorkflowCommandPlacement": {
        "id": "mbmSubmitToWorkflowCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 600,
        "parentGroupId": "mbmManage"
      },
      "mbmUpdateEquivalentAssignmentDomainsCmdPlacement": {
        "id": "mbmUpdateEquivalentAssignmentDomainsCmd",
        "uiAnchor": "mbmEbom_contextMenu",
        "priority": 1
      },
      "mbmCheckOutCommandPlacement": {
        "id": "Awp0Checkout",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 700,
        "parentGroupId": "mbmManage"
      },
      "mbmCheckInCommandPlacement": {
        "id": "Awp0Checkin",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 800,
        "parentGroupId": "mbmManage"
      },
      "mbmCancelCheckOutCommandPlacement": {
        "id": "Awp0CancelCheckout",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 900,
        "parentGroupId": "mbmManage"
      },
      "assignFromEbomToMbomCommandPlacement": {
        "id": "assignFromEbomToMbomCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 45
      },
      "mbmAssignmentScopeCommandPlacement": {
        "id": "mbmAssignmentScope",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 45
      },
      "addMfgPartOrMfgAssemblyCommandPlacement": {
        "id": "addMfgPartOrMfgAssemblyCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 46
      },
      "addMfgPartOrMfgAssemblyChildCommandPlacement": {
        "id": "mbmCreateMfgPartOrMfgAssemblyCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 100,
        "parentGroupId": "addMfgPartOrMfgAssemblyCommand"
      },
      "mbmRemoveCommandPlacements": {
        "id": "mbmRemoveCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 47
      },
      "mbmCreateBasedOnCommandPlacements": {
        "id": "mbmCreateBasedOnCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 200,
        "parentGroupId": "addMfgPartOrMfgAssemblyCommand"
      },
      "mbmMbomStartEditTableCommandPlacement": {
        "id": "mbmStartEditTable",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 400
      },
      "mbmMbomSaveEditGroupCommandPlacement": {
        "id": "mbmMbomSaveEditGroupPrimaryWorkArea",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 400
      },
      "mbmHandleMismatchPlacement": {
        "id": "mbmHandleMismatch",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 49
      },
      "mbmManagePlacement": {
        "id": "mbmManage",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 50
      },
      "mbmMbomSaveEditsPWA": {
        "id": "mbmMbomSaveEditsPWA",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 100,
        "parentGroupId": "mbmMbomSaveEditGroupPrimaryWorkArea"
      },
      "mbmMbomCancelEditsPWA": {
        "id": "mbmMbomCancelEditsPWA",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 100,
        "parentGroupId": "mbmMbomSaveEditGroupPrimaryWorkArea"
      },
      "mbmImpactOfChangeCommandPlacement": {
        "id": "mbmImpactOfChangeCommand",
        "uiAnchor": "aw_rightWall",
        "priority": 5000
      },
      "mbmMfgCNPopupCloseCommandPlacement": {
        "id": "mbmMfgCNPopupCloseCommand",
        "uiAnchor": "mfgImpactPopupCloseCmdAnchor",
        "priority": 100
      },
      "mbmAssociateChangeNoticeCommandPlacement": {
        "id": "mbmAssociateChangeNoticeCommand",
        "uiAnchor": "mbmAssociateCNCmdAnchor"
      },
      "mbmCreateMCNCommandPlacement": {
        "id": "mbmCreateMCNCommand",
        "uiAnchor": "mbmAssociateCNCmdAnchor"
      },
      "mbmNavigateWorkpackageFromMfgImpageCNPopupPlacement": {
        "id": "mbmNavigateWorkpackageFromMfgImpactedCNPopupCommand",
        "uiAnchor": "mbmCnPopupWpNavigate",
        "priority": 1,
        "cellDisplay": {
          "hover": true,
          "position": "TOP_RIGHT",
          "selected": true
        }
      },
      "mbmPullPropagateCommandPlacement": {
        "id": "mbmPullPropagateCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 1000,
        "parentGroupId": "mbmHandleMismatch"
      },
      "mbmCompareCommandPlacement": {
        "id": "mbmCompareCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 900,
        "parentGroupId": "mbmHandleMismatch"
      },
      "mbmOccEffectivityCommandPlacement": {
        "id": "mbmOccEffectivityCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 300,
        "parentGroupId": "mbmManage"
      },
      "mbmFindInEBOMCommandPlacement": {
        "id": "mbmFindInEBomCommand",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 100
      },
      "mbmFindInMBOMCommandPlacement": {
        "id": "mbmFindInMBomCommand",
        "uiAnchor": "mbmEbom_contextMenu",
        "priority": 0
      },
      "mbmEbomPartialCompareCommandPlacement": {
        "id": "mbmEbomPartialCompareCommand",
        "uiAnchor": "mbmEbom_contextMenu",
        "priority": 1
      },
      "mbmMbomPartialCompareCommandPlacement": {
        "id": "mbmMbomPartialCompareCommand",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 101
      },
      "mbmCutContextMenuCommandPlacement": {
        "id": "mbmCutContextMenuCommand",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 200
      },
      "mbmCopyContextMenuCommandPlacement": {
        "id": "mbmCopyContextMenuCommand",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 201
      },
      "mbmPasteAfterCutContextMenuCommandPlacement": {
        "id": "mbmPasteAfterCutContextMenuCommand",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 202
      },
      "mbmPasteAfterCopyContextMenuCommandPlacement": {
        "id": "mbmPasteAfterCopyContextMenuCommand",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 203
      },
      "mbmCheckOutContextCommandPlacement": {
        "id": "mbmCheckoutContextMenu",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 300
      },
      "mbmCheckInContextCommandPlacement": {
        "id": "mbmCheckinContextMenu",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 301
      },
      "mbmCancelCheckOutContextCommandPlacement": {
        "id": "mbmCancelCheckoutContextMenu",
        "uiAnchor": "mbmMbom_contextMenu",
        "priority": 302
      },
      "mbmFullScreenCommandPlacement": {
        "id": "mbmTaskbarFullScreen",
        "uiAnchor": "ep_commandBarRightSlot",
        "priority": 999
      },
      "mbmExitFullScreenCommandPlacement": {
        "id": "mbmTaskbarExitFullScreen",
        "uiAnchor": "ep_commandBarRightSlot",
        "priority": 999
      },
      "mbmUnifiedInContextSearchCommandPlacement": {
        "id": "mbmUnifiedInContextSearch",
        "uiAnchor": "mbm_primWorkArea_right",
        "priority": 100
      },
      "copyMfgPartOrMfgAssemblyCommandPlacement": {
        "id": "epCopyMfgPartCommand",
        "uiAnchor": "mbm_primWorkArea_left",
        "priority": 600,
        "parentGroupId": "mbmManage"
      }
    },
    "commandHandlers": {
      "openEBOMConfigPanelCommandHandler": {
        "id": "epEbomConfigurationFilter",
        "action": "mbmEbomLaunchConfigurationPanelAction",
        "activeWhen": {
          "condition": "conditions.isMbmAlignmentPage"
        },
        "visibleWhen": {
          "condition": "conditions.isEpConfigurationAvailable"
        }
      },
      "mbmValidationRunCommandHandler": {
        "id": "epValidationRunCommand",
        "action": "mbmValidationRunCommandAction",
        "enableWhen": {
          "condition": "conditions.hasValidationInput"
        },
        "activeWhen": {
          "condition": "conditions.isMbmAlignmentPage"
        },
        "visibleWhen": true
      },
      "openMBOMConfigPanelCommandHandler": {
        "id": "epMbomConfigurationFilter",
        "action": "mbmMbomLaunchConfigurationPanelAction",
        "activeWhen": {
          "condition": "conditions.isMbmAlignmentPage"
        },
        "visibleWhen": {
          "condition": "conditions.isEpConfigurationAvailable"
        }
      },
      "openMBMAlignmentCommandForTaskSwitherHandler": {
        "id": "openMBMAlignmentCommandForTaskSwither",
        "action": "OpenInMbmAlignmentHeaderPage",
        "activeWhen": {
          "condition": "conditions.isOpenMBMAlignmentTaskActive"
        },
        "visibleWhen": {
          "condition": "conditions.isOpenMBMAlignmentTaskEnableOrVisible"
        },
        "selectWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        }
      },
      "openMBMAlignmentCommandForManagePageHandler": {
        "id": "openMBMAlignmentTaskForManagePageCommand",
        "action": "OpenInMbmAlignmentTaskPage",
        "activeWhen": true,
        "visibleWhen": {
          "condition": "conditions.isEBOMMBOMAlignmentAllowedAndPageExistsInWorkspace"
        },
        "enableWhen": {
          "condition": "conditions.isEbomMbomAvailable"
        }
      },
      "mbmFocusCommandHandler": {
        "id": "mbmFocusCommand",
        "action": "mbmFocusCommandBatchAction",
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmEnableBOMFiltering"
        },
        "enableWhen": {
          "condition": "conditions.isFocusCommandEnable"
        },
        "selectWhen": {
          "condition": "conditions.isFocusCommandSelect"
        }
      },
      "XRTXcShareDataHandler": {
        "id": "XcShareData",
        "activeWhen": {
          "condition": "conditions.mbmXrtIncludeXcShareCommand"
        },
        "enableWhen": {
          "condition": "conditions.mbmXcShareCommandEnable"
        }
      },
      "XRTXc0ReplaceDatasetCommandHandler": {
        "id": "Awp0ReplaceDataset",
        "activeWhen": {
          "condition": "conditions.mbmXrtIncludeAwp0ReplaceDatasetCommand"
        },
        "enableWhen": {
          "condition": "conditions.mbmXcShareCommandEnable"
        }
      },
      "mbmCutContextMenuCommandHandler": {
        "id": "mbmCutContextMenuCommand",
        "action": "mbmCutContentsToClipboardBatchAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "enableWhen": {
          "condition": "conditions.mbmEnableCutCommand"
        }
      },
      "mbmCopyContextMenuCommandHandler": {
        "id": "mbmCopyContextMenuCommand",
        "action": "mbmCopyContentsToClipboardBatchAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "enableWhen": {
          "condition": "conditions.mbmEnableCutCommand"
        }
      },
      "mbmPasteAfterCutContextMenuCommandHandler": {
        "id": "mbmPasteAfterCutContextMenuCommand",
        "action": "mbmPasteAfterCutFromClipboardBatchAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.mbmPasteAfterCutCommandVisible"
        },
        "enableWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        }
      },
      "mbmPasteAfterCopyContextMenuCommandHandler": {
        "id": "mbmPasteAfterCopyContextMenuCommand",
        "action": "mbmPasteAfterCopyFromClipboardAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.mbmPasteAfterCopyCommandVisible"
        },
        "enableWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        }
      },
      "mbmScopeCommandHandler": {
        "id": "mbmScopeCommand",
        "action": "mbmScopeCommandAction",
        "activeWhen": {
          "condition": "conditions.isMbmEnableBOMFiltering"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmScopeCommandVisible"
        },
        "enableWhen": {
          "condition": "conditions.isMbmScopeCommandEnable"
        }
      },
      "mbmRemoveScopeCommandHandler": {
        "id": "mbmRemoveScopeCommand",
        "action": "evaluateRemoveScopeCommandAction",
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmRemoveScopeCommandVisible"
        },
        "enableWhen": {
          "condition": "conditions.isMbmRemoveScopeCommandEnable"
        }
      },
      "mbmShowEbom3DViewerCommandHandler": {
        "id": "mbmShowEbom3DViewerCommand",
        "action": "mbmShow3DViewerToggleAction",
        "activeWhen": {
          "condition": "conditions.mbmShowEbom3DViewerCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmShowEbom3DViewerCmdCondition"
        }
      },
      "mbmShowMbom3DViewerCommandHandler": {
        "id": "mbmShowMbom3DViewerCommand",
        "action": "mbmShow3DViewerToggleAction",
        "activeWhen": {
          "condition": "conditions.mbmShowMbom3DViewerCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmShowMbom3DViewerCmdCondition"
        }
      },
      "mbmHide3DViewerCommandHandler": {
        "id": "mbmHide3DViewerCommand",
        "action": "mbmShow3DViewerToggleAction",
        "activeWhen": {
          "condition": "conditions.mbmHide3DViewerCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmHide3DViewerCmdCondition"
        }
      },
      "mbm3DViewerFullScreenHandler": {
        "id": "Awp0FullScreen",
        "action": "mbm3DViewerFullScreenAction",
        "activeWhen": {
          "condition": "conditions.mbm3DViewerFullScreenCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbm3DViewerFullScreenCmdCondition"
        }
      },
      "mbm3DViewerExitFullScreenHandler": {
        "id": "Awp0ExitFullScreen",
        "action": "mbm3DViewerFullScreenAction",
        "activeWhen": {
          "condition": "conditions.mbm3DViewerExitFullScreenCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbm3DViewerExitFullScreenCmdCondition"
        }
      },
      "showMbmColumnArrangeCommandHandler": {
        "id": "openArrangePanel",
        "action": "processColumnsArrangeSettings",
        "activeWhen": {
          "condition": "conditions.isTableColumnArrangeIconVisible"
        },
        "enableWhen": true,
        "visibleWhen": {
          "condition": "conditions.isTableColumnArrangeIconVisible"
        }
      },
      "mbmOpenWpCmdHandler": {
        "id": "Awp0ShowObjectCell",
        "action": "validateMbmLicense",
        "activeWhen": {
          "condition": "conditions.mbmOpenWpCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmOpenWpCmdCondition"
        }
      },
      "ETOOpenWpCmdHandler": {
        "id": "Awp0ShowObjectCell",
        "action": "openManageWorkPackagePageWithMCN",
        "activeWhen": {
          "condition": "conditions.ETOOpenWpCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.ETOOpenWpCmdCondition"
        }
      },
      "mbmOpenWpFromManagePageCmdHandler": {
        "id": "openInMbmAlignPage",
        "action": "OpenInMbmAlignPage",
        "activeWhen": {
          "condition": "conditions.isManageWPPageInMbmWorkspace"
        },
        "visibleWhen": {
          "condition": "conditions.isManageWPPageInMbmWorkspace"
        }
      },
      "mbmOpenWPHoveredCmdHandler": {
        "id": "Awp0ShowObjectCellForObjectNavigation",
        "action": "validateMbmLicense",
        "activeWhen": {
          "condition": "conditions.mbmOpenWpCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmOpenWpCmdCondition"
        }
      },
      "mbmOpenBaseWPCommandHandler": {
        "id": "Awp0ShowObject",
        "action": "openWPFromRightWall",
        "activeWhen": {
          "condition": "conditions.mbmCCObjectOpenBaseVisibleCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmCCObjectOpenBaseVisibleCondition"
        }
      },
      "mbmOpenWPInNewTabCommandHandler": {
        "id": "Awp0OpenInNewTab",
        "action": "openWPInNewTab",
        "activeWhen": {
          "condition": "conditions.mbmOpenWPInNewTabOrWindowCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmOpenWPInNewTabOrWindowCmdCondition"
        }
      },
      "openWPInNewWindowCommandHandler": {
        "id": "Awp0OpenInNewWindow",
        "action": "openWPInNewWindow",
        "activeWhen": {
          "condition": "conditions.mbmOpenWPInNewTabOrWindowCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmOpenWPInNewTabOrWindowCmdCondition"
        }
      },
      "openWPInIllustratorCommandHandler": {
        "id": "openInIllustrator",
        "action": "",
        "activeWhen": {
          "condition": "conditions.mbmCCObjectOpenBaseVisibleCondition"
        },
        "visibleWhen": false
      },
      "openWPInRACCommandHandler": {
        "id": "Awp0OpenInRAC",
        "action": "",
        "activeWhen": {
          "condition": "conditions.mbmCCObjectOpenBaseVisibleCondition"
        },
        "visibleWhen": false
      },
      "openWPInVVICommandHandler": {
        "id": "Awp0OpenVVI",
        "action": "",
        "activeWhen": {
          "condition": "conditions.mbmCCObjectOpenBaseVisibleCondition"
        },
        "visibleWhen": false
      },
      "assignFromEbomToMbomCommandHandler": {
        "id": "assignFromEbomToMbomCommand",
        "action": "mbmAssignFromEbomToMbomCommandAction",
        "visibleWhen": {
          "condition": "conditions.assignFromEbomToMbomCommandVisible"
        },
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.assignFromEbomToMbomCommandEnable"
        }
      },
      "mbmRemoveHandler": {
        "id": "mbmRemoveCommand",
        "action": "removeCmdAction",
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "visibleWhen": {
          "condition": "conditions.mbmRemoveCommandVisible"
        },
        "enableWhen": {
          "condition": "conditions.mbmRemoveCommandEnable"
        }
      },
      "mbmEbom3DBottomLayoutCommandHandler": {
        "id": "mbmEbom3DBottomLayoutCommand",
        "action": "mbmSetEbomBottomLayout",
        "activeWhen": true,
        "visibleWhen": {
          "condition": "conditions.isEbomGraphicsInFullScreen"
        },
        "enableWhen": true,
        "selectWhen": {
          "condition": "conditions.isEbomBottomLayoutSelected"
        }
      },
      "mbmEbom3DSideLayoutCommandHandler": {
        "id": "mbmEbom3DSideLayoutCommand",
        "action": "mbmSetEbomSideLayout",
        "activeWhen": true,
        "visibleWhen": {
          "condition": "conditions.isEbomGraphicsInFullScreen"
        },
        "enableWhen": true,
        "selectWhen": {
          "condition": "conditions.isEbomSideLayoutSelected"
        }
      },
      "mbmMbom3DBottomLayoutCommandHandler": {
        "id": "mbmMbom3DBottomLayoutCommand",
        "action": "mbmSetMbomBottomLayout",
        "activeWhen": true,
        "visibleWhen": {
          "condition": "conditions.isMbomGraphicsInFullScreen"
        },
        "enableWhen": true,
        "selectWhen": {
          "condition": "conditions.isMbomBottomLayoutSelected"
        }
      },
      "mbmMbom3DSideLayoutCommandHandler": {
        "id": "mbmMbom3DSideLayoutCommand",
        "action": "mbmSetMbomSideLayout",
        "activeWhen": true,
        "visibleWhen": {
          "condition": "conditions.isMbomGraphicsInFullScreen"
        },
        "enableWhen": true,
        "selectWhen": {
          "condition": "conditions.isMbomSideLayoutSelected"
        }
      },
      "mbmCreateMfgPartOrMfgAssemblyCommandHandler": {
        "id": "mbmCreateMfgPartOrMfgAssemblyCommand",
        "action": "launchAddChildElementPanel",
        "visibleWhen": {
          "condition": "conditions.isMbomContext"
        },
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.addMfgPartOrMfgAssemblyCommandEnable"
        }
      },
      "mbmMbomStartEditTableCommandHandler": {
        "id": "mbmStartEditTable",
        "action": "mbmMbomStartTreeEdit",
        "visibleWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditable"
        },
        "activeWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditable"
        },
        "enableWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditCommandEnable"
        }
      },
      "mbmMbomSaveEditGroupPWACommandHandler": {
        "id": "mbmMbomSaveEditGroupPrimaryWorkArea",
        "action": "",
        "activeWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditInProgress"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditInProgress"
        }
      },
      "mbmMbomSaveEditsPWAHandler": {
        "id": "mbmMbomSaveEditsPWA",
        "action": "mbmMbomSaveEdits",
        "activeWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditInProgress"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditInProgress"
        }
      },
      "mbmMbomCancelEditsPWAHandler": {
        "id": "mbmMbomCancelEditsPWA",
        "action": "isDirtyOnCancelEdits",
        "activeWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditInProgress"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmMbomTreeTableEditInProgress"
        }
      },
      "mbmImpactOfChangeCommandHandler": {
        "id": "mbmImpactOfChangeCommand",
        "action": "openECNInpopup",
        "activeWhen": {
          "condition": "conditions.mbmChangeImpactCommandCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmChangeImpactCommandCondition"
        }
      },
      "mbmPackHandler": {
        "id": "Awb0Pack",
        "action": "mbmPackElements",
        "activeWhen": {
          "condition": "conditions.isMbmPackCmdActive"
        },
        "enableWhen": {
          "condition": "conditions.isMbmPackCmdEnable"
        },
        "visibleWhen": true
      },
      "mbmUnpackHandler": {
        "id": "Awb0Unpack",
        "action": "aceUnpackElements",
        "activeWhen": {
          "condition": "conditions.isMbmUnpackCmdActive"
        },
        "enableWhen": {
          "condition": "conditions.isMbmUnpackCmdEnable"
        },
        "visibleWhen": true
      },
      "mbmPackAllHandler": {
        "id": "Awb0PackAll",
        "action": "mbmPackAllAction",
        "activeWhen": {
          "condition": "conditions.isMbmPackAllCmdActive"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmPackAllCmdVisible"
        }
      },
      "mbmUnpackAllHandler": {
        "id": "Awb0UnpackAll",
        "action": "mbmUnPackAllAction",
        "activeWhen": {
          "condition": "conditions.isMbmUnpackAllCmdActive"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmUnpackAllCmdVisible"
        }
      },
      "mbmImpactedWorkpackagePopupCloseCommandHandler": {
        "id": "mbmMfgCNPopupCloseCommand",
        "action": "mbmImpactedWorkpackagePopupClose",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        }
      },
      "mbmAssociateChangeNoticeCommandHandler": {
        "id": "mbmAssociateChangeNoticeCommand",
        "action": "mbmAssociateChangeNoticeUpdateWorkPackageAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isAssociateCNVisible"
        },
        "enableWhen": {
          "condition": "conditions.isAssociateCNEnabled"
        }
      },
      "mbmCreateMCNCommandHandler": {
        "id": "mbmCreateMCNCommand",
        "action": "mbmShowCreateMCNAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isCreateMCNVisible"
        },
        "enableWhen": {
          "condition": "conditions.isCreateMCNEnabled"
        }
      },
      "mbmCreateMCNCommandHandler1": {
        "id": "mbmCreateMCNCommand1",
        "action": "mbmShowCreateMCNAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isCreateMCNVisible"
        },
        "enableWhen": {
          "condition": "conditions.isCreateMCNEnabled"
        }
      },
      "mbmEvaluateNavigateWorkpackageFromMfgImpactCNPopupHandler": {
        "id": "mbmNavigateWorkpackageFromMfgImpactedCNPopupCommand",
        "action": "mbmEvaluateToNavigateWorkpackageFromMfgImpactCNAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        }
      },
      "mbmEvaluateNavigateWorkpackageFromMfgImpactCNPopupHandlerForETO": {
        "id": "mbmNavigateWorkpackageFromMfgImpactedCNPopupCommand",
        "action": "openManageWorkPackagePage",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelectedAndETOWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelectedAndETOWorkspaceSelected"
        }
      },
      "mbmExpandCommandHandler": {
        "id": "Awb0Expand",
        "action": "showExpandOptions",
        "activeWhen": {
          "condition": "conditions.isEBOMorMbomContext"
        },
        "visibleWhen": {
          "condition": "conditions.isEBOMorMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.isMbmExpandCommandEnable"
        }
      },
      "mbmReviseCommandHandler": {
        "id": "mbmReviseCommand",
        "action": "mbmReviseElementAction",
        "visibleWhen": {
          "condition": "conditions.isReviseCmdActive"
        },
        "activeWhen": {
          "condition": "conditions.isReviseCmdActive"
        },
        "enableWhen": {
          "condition": "conditions.mbmReviseCommandEnable"
        }
      },
      "mbmAlignCommandHandler": {
        "id": "mbmAlignCommand",
        "action": "mbmAlignCommandAction",
        "visibleWhen": {
          "condition": "conditions.isAlignCmdActive"
        },
        "activeWhen": {
          "condition": "conditions.isAlignCmdActive"
        },
        "enableWhen": {
          "condition": "conditions.mbmAlignCommandEnable"
        }
      },
      "mbmSubmitToWorkflowCommandHandler": {
        "id": "mbmSubmitToWorkflowCommand",
        "action": "getSubmitToWorkflowInputs",
        "visibleWhen": {
          "condition": "conditions.isMbmSubmitToWorkflowCmdActive"
        },
        "activeWhen": {
          "condition": "conditions.isMbmSubmitToWorkflowCmdActive"
        },
        "enableWhen": {
          "condition": "conditions.mbmSubmitToWorkflowCommandEnable"
        }
      },
      "mbmUpdateEquivalentAssignmentDomainsCmdHandler": {
        "id": "mbmUpdateEquivalentAssignmentDomainsCmd",
        "action": "updateEquivalentAssignmentDomains",
        "activeWhen": {
          "condition": "conditions.isMbmAlignmentPage"
        },
        "visibleWhen": {
          "condition": "conditions.mbmUpdateAssignmentDomainCmdVisibility"
        }
      },
      "mbmCheckOutCommandHandler": {
        "id": "Awp0Checkout",
        "action": "isDirty",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.mbmCheckoutVisibility"
        },
        "enableWhen": {
          "condition": "conditions.mbmCheckCommandsEnable"
        }
      },
      "mbmCheckInCommandHandler": {
        "id": "Awp0Checkin",
        "action": "checkEditInProgressBeforeCheckin",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.mbmCheckinVisibility"
        },
        "enableWhen": {
          "condition": "conditions.mbmCheckCommandsEnable"
        }
      },
      "mbmCancelCheckOutCommandHandler": {
        "id": "Awp0CancelCheckout",
        "action": "getCancelCheckoutInputs",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.mbmCancelCheckoutVisibility"
        },
        "enableWhen": {
          "condition": "conditions.mbmCheckCommandsEnable"
        }
      },
      "mbmCheckOutContextCommandHandler": {
        "id": "mbmCheckoutContextMenu",
        "action": "isDirty",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.checkoutVisibility"
        },
        "enableWhen": {
          "condition": "conditions.mbmCheckCommandsEnable"
        }
      },
      "mbmCheckInContextCommandHandler": {
        "id": "mbmCheckinContextMenu",
        "action": "checkEditInProgressBeforeCheckin",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.checkinVisibility"
        },
        "enableWhen": {
          "condition": "conditions.mbmCheckCommandsEnable"
        }
      },
      "mbmCancelCheckOutContextCommandHandler": {
        "id": "mbmCancelCheckoutContextMenu",
        "action": "getCancelCheckoutInputs",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.cancelCheckoutVisibility"
        },
        "enableWhen": {
          "condition": "conditions.mbmCheckCommandsEnable"
        }
      },
      "mbmPullPropagateCommandHandler": {
        "id": "mbmPullPropagateCommand",
        "action": "evaluatePullPropagateChanges",
        "visibleWhen": {
          "condition": "conditions.mbmPullPropagationCommandVisible"
        },
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.mbmPullPropagationCommandEnable"
        }
      },
      "mbmCompareCommandHandler": {
        "id": "mbmCompareCommand",
        "action": "mbmEvaluateComparePopupTitle",
        "visibleWhen": {
          "condition": "conditions.mbmCompareCommandVisible"
        },
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.mbmCompareCommandEnable"
        }
      },
      "mbmOccEffectivityCommandHandler": {
        "id": "mbmOccEffectivityCommand",
        "action": "launchOccEffectivityPanel",
        "visibleWhen": {
          "condition": "conditions.mbmEffectivityCommandVisible"
        },
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.mbmEffectivityCommandEnable"
        }
      },
      "mbmFindInEbomCommandHandler": {
        "id": "mbmFindInEBomCommand",
        "action": "mbmFindInEbomAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "enableWhen": {
          "condition": "conditions.mbmFindInEbomCommandEnable"
        }
      },
      "mbmFindInMbomCommandHandler": {
        "id": "mbmFindInMBomCommand",
        "action": "mbmFindInMbomAction",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "enableWhen": {
          "condition": "conditions.mbmFindInMbomCommandEnable"
        }
      },
      "mbmEbomPartialCompareCommandHandler": {
        "id": "mbmEbomPartialCompareCommand",
        "action": "evaluateEbomPartialCompare",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsMbmPartialCompareCmdVisible"
        },
        "enableWhen": {
          "condition": "conditions.IsMbmEbomPartialCompareCmdEnable"
        }
      },
      "mbmMbomPartialCompareCommandHandler": {
        "id": "mbmMbomPartialCompareCommand",
        "action": "evaluateMbomPartialCompare",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.IsMbmPartialCompareCmdVisible"
        },
        "enableWhen": {
          "condition": "conditions.IsMbmMbomPartialCompareCmdEnable"
        }
      },
      "mbmTaskbarFullScreenHandler": {
        "id": "mbmTaskbarFullScreen",
        "action": "Awp0TaskbarFullScreenToggleAction",
        "activeWhen": {
          "condition": "conditions.mbmTaskbarFullScreenCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmTaskbarFullScreenCmdCondition"
        }
      },
      "mbmTaskbarExitFullScreenHandler": {
        "id": "mbmTaskbarExitFullScreen",
        "action": "Awp0TaskbarFullScreenToggleAction",
        "activeWhen": {
          "condition": "conditions.mbmTaskbarExitFullScreenCmdCondition"
        },
        "visibleWhen": {
          "condition": "conditions.mbmTaskbarExitFullScreenCmdCondition"
        }
      },
      "cmdAddToFavoritesmbmCommandHandler": {
        "id": "Awp0AddToFavorites",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": false
      },
      "cmdRemoveFromFavoritesmbmCommandHandler": {
        "id": "Awp0RemoveFromFavorites",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": false
      },
      "mbmValidateEffectivityCommandHandler": {
        "id": "mbmValidateEffectivityCommand",
        "action": "mbmLoadValidateEffectivityData",
        "activeWhen": {
          "condition": "conditions.IsValidWorkspaceSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isMbmValidateEffectivityCommandVisible"
        },
        "enableWhen": {
          "condition": "conditions.isMbmValidateEffectivityCommandEnable"
        }
      },
      "mbmUnifiedInContextSearchCommandHandler": {
        "id": "mbmUnifiedInContextSearch",
        "action": "launchUnifiedNavigationPanel",
        "activeWhen": {
          "condition": "conditions.isEBOMorMbomContext"
        },
        "visibleWhen": {
          "condition": "conditions.isEBOMorMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.isMbmFindCmdEnable"
        }
      },
      "openMbmNotificationCommandHandler": {
        "id": "Awp0OpenLineItem",
        "action": "openMbmNotification",
        "activeWhen": {
          "condition": "conditions.enableMbmNotificationCommandCond"
        },
        "visibleWhen": {
          "condition": "conditions.enableMbmNotificationCommandCond"
        }
      },
      "mbmCreateBasedOnCommandHandler": {
        "id": "mbmCreateBasedOnCommand",
        "action": "mbmCreateBasedOnPreProcessAction",
        "activeWhen": {
          "condition": "conditions.isMbomContext"
        },
        "visibleWhen": {
          "condition": "conditions.isMbomContext"
        },
        "enableWhen": {
          "condition": "conditions.isCreateBasedOncommandEnable"
        }
      },
      "removeSubstitutesCommanddHandler": {
        "id": "Awb0RemoveSubstitutes",
        "action": "removeSubstitutes",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isRemoveSubstitutesCmdVisibleInMBM"
        }
      },
      "addSubstitutesCommandHandler": {
        "id": "Awb0AddSubstitutes",
        "action": "checkForEditsAndLaunchAddSubstitutesPanel",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isAddSubstitutesCmdVisibleInMBM"
        }
      },
      "useSubstituteCommndHandler": {
        "id": "Awb0UseSubstitute",
        "action": "useSubstitute",
        "activeWhen": {
          "condition": "conditions.isMBMAlignmentSelected"
        },
        "visibleWhen": {
          "condition": "conditions.isUseSubstituteCmdVisibleInMBM"
        }
      }
    },
    "actions": {
      "mbmPackAllAction": {
        "actionType": "JSFunction",
        "method": "packAllOrUnpackAllElements",
        "inputData": {
          "contextKey": "{{commandContext.viewKey}}",
          "value": true
        },
        "events": {
          "success": [
            {
              "name": "hideExpandOptionsPopup"
            }
          ]
        },
        "deps": "js/mbmPackUnpackService"
      },
      "mbmUnPackAllAction": {
        "actionType": "JSFunction",
        "method": "packAllOrUnpackAllElements",
        "inputData": {
          "contextKey": "{{commandContext.viewKey}}",
          "value": false
        },
        "events": {
          "success": [
            {
              "name": "hideExpandOptionsPopup"
            }
          ]
        },
        "deps": "js/mbmPackUnpackService"
      },
      "mbmCreateBasedOnPreProcessAction": {
        "actionType": "JSFunction",
        "method": "updateSaveAsContext",
        "deps": "js/Awp0ShowSaveAsService",
        "inputData": {
          "selectedObj": "{{ctx.mbomContext.selectedModelObjects[0]}}"
        },
        "events": {
          "success": [
            {
              "name": "mbmCreateBasedOnPreProcessingSuccessful"
            }
          ]
        }
      },
      "mbmLaunchCreateBasedOnPopupAction": {
        "actionType": "JSFunction",
        "method": "show",
        "inputData": {
          "data": {
            "declView": "MbmSaveAsPopup",
            "locals": {
              "caption": "{{i18n.CreateBasedOnTitle}}"
            },
            "options": {
              "height": "500",
              "width": "450"
            },
            "subPanelContext": {
              "selectedObject": "{{ctx.mbomContext.selectedModelObjects[0]}}"
            }
          }
        },
        "outputData": {
          "popupId": "id"
        },
        "deps": "js/popupService"
      },
      "OpenInMbmAlignmentHeaderPage": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "loadImpactingCN"
          },
          {
            "action": "getImpactingCNFromTrackingCN",
            "condition": "conditions.isPagehasTrackingChanges"
          },
          {
            "action": "OpenInMbmAlignmentHeaderPageAct",
            "condition": "data.impacted_cn !== 'error'"
          },
          {
            "action": "showMCNNotExistError",
            "condition": "data.impacted_cn === 'error'"
          },
          {
            "action": "updateMbomNodeToselectInCtx"
          }
        ]
      },
      "loadImpactingCN": {
        "actionType": "JSFunction",
        "method": "getProperties",
        "inputData": {
          "uids": [
            "{{ctx.state.params.tracking_cn}}"
          ],
          "propNames": [
            "CMImplements"
          ]
        },
        "deps": "soa/dataManagementService"
      },
      "getImpactingCNFromTrackingCN": {
        "actionType": "JSFunction",
        "method": "getImpactedCN",
        "inputData": {
          "path": "{{ctx.state.params.tracking_cn}}",
          "data": "{{data}}"
        },
        "outputData": {
          "impacted_cn": ""
        },
        "deps": "js/mbmChangeNoticeService"
      },
      "OpenInMbmAlignmentHeaderPageAct": {
        "actionType": "Navigate",
        "navigateTo": "multiBOMManager",
        "navigationParams": {
          "cc_uid": "{{ctx.epTaskPageContext.collaborationContext.uid}}",
          "tracking_cn": "{{ctx.state.params.tracking_cn}}",
          "impacting_cn": "{{data.impacted_cn}}"
        }
      },
      "OpenInMbmAlignmentTaskPage": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": "{{ctx.epTaskPageContext.collaborationContext}}",
            "navigationType": "_self"
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidated"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "mbmFocusCommandBatchAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmEvaluteSelectionsForCheckout",
            "condition": "conditions.mbmEvaluateForCheckoutCondition"
          },
          {
            "action": "mbmFocusCommandToggleBatchAction",
            "condition": "conditions.mbmToggleFocusCommandCondition"
          }
        ]
      },
      "evaluateEbomPartialCompare": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "validateEbomPartialCompareSelections"
          },
          {
            "action": "clearPartialCompare",
            "condition": "data.partialComapareValidationInfo && data.partialComapareValidationInfo.isInvalidSelection === false"
          },
          {
            "action": "mbmPerformEbomPartialCompare",
            "condition": "data.partialComapareValidationInfo && data.partialComapareValidationInfo.isInvalidSelection === false"
          }
        ]
      },
      "evaluateMbomPartialCompare": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "validateMbomPartialCompareSelections"
          },
          {
            "action": "clearPartialCompare",
            "condition": "data.partialComapareValidationInfo && data.partialComapareValidationInfo.isInvalidSelection === false"
          },
          {
            "action": "mbmPerformMbomPartialCompare",
            "condition": "data.partialComapareValidationInfo && data.partialComapareValidationInfo.isInvalidSelection === false"
          }
        ]
      },
      "validateEbomPartialCompareSelections": {
        "actionType": "JSFunction",
        "method": "validatePartialCompareSelections",
        "inputData": {
          "selectedObjects": "{{ctx.ebomContext.selectedModelObjects}}",
          "focusMode": "{{ctx.mbmFocusModeSelected}}"
        },
        "outputData": {
          "partialComapareValidationInfo": ""
        },
        "actionMessages": {
          "success": [
            {
              "condition": "partialComapareValidationInfo === false",
              "message": "partialCompareInUnfocusModeMessage"
            },
            {
              "condition": "data.partialComapareValidationInfo.isInvalidSelection === true && ctx.ebomContext.selectedModelObjects.length === 1",
              "message": "partialCompareInvalidEBOMSingleSelectMessage"
            },
            {
              "condition": "data.partialComapareValidationInfo.isInvalidSelection === true && ctx.ebomContext.selectedModelObjects.length > 1",
              "message": "partialCompareInvalidEBOMMultiSelectMessage"
            }
          ]
        },
        "deps": "js/mbmPartialCompareService"
      },
      "clearPartialCompare": {
        "actionType": "JSFunction",
        "method": "clearPartialCompare",
        "inputData": {
          "ebomContextKey": "ebomContext",
          "mbomContextKey": "mbomContext"
        },
        "deps": "js/mbmPartialCompareService"
      },
      "validateMbomPartialCompareSelections": {
        "actionType": "JSFunction",
        "method": "validatePartialCompareSelections",
        "inputData": {
          "selectedObjects": "{{ctx.mbomContext.selectedModelObjects}}",
          "focusMode": "{{ctx.mbmFocusModeSelected}}"
        },
        "outputData": {
          "partialComapareValidationInfo": ""
        },
        "actionMessages": {
          "success": [
            {
              "condition": "partialComapareValidationInfo === false",
              "message": "partialCompareInUnfocusModeMessage"
            },
            {
              "condition": "data.partialComapareValidationInfo.isInvalidSelection === true && ctx.ebomContext.selectedModelObjects.length === 1",
              "message": "partialCompareInvalidMBOMSingleSelectMessage"
            },
            {
              "condition": "data.partialComapareValidationInfo.isInvalidSelection === true && ctx.ebomContext.selectedModelObjects.length > 1",
              "message": "partialCompareInvalidMBOMMultiSelectMessage"
            }
          ]
        },
        "deps": "js/mbmPartialCompareService"
      },
      "mbmEvaluteSelectionsForCheckout": {
        "actionType": "JSFunctionAsync",
        "method": "populateCheckoutData",
        "inputData": {
          "selectedElement": "{{ctx.mbomContext.selectedModelObjects}}",
          "currentUser": "{{ctx.userSession.props.user.dbValue}}"
        },
        "outputData": {
          "mbomCheckoutInfo": ""
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmCheckoutByAnotherSingleUserMessage",
              "condition": "data.mbomCheckoutInfo.anySelectionsCheckedOutByAnotherUser === true && data.mbomCheckoutInfo.singleSelectionCheckoutInfo.objectName"
            },
            {
              "message": "mbmCheckoutByAnotherMultipleUserMessage",
              "condition": "data.mbomCheckoutInfo.anySelectionsCheckedOutByAnotherUser === true && !data.mbomCheckoutInfo.singleSelectionCheckoutInfo.objectName"
            },
            {
              "message": "mbmCheckoutAndFocusSingleUserMessage",
              "condition": "data.mbomCheckoutInfo.anySelectionsCheckedOutByAnotherUser === false && data.mbomCheckoutInfo.singleSelectionCheckoutInfo.objectName"
            },
            {
              "message": "mbmCheckoutAndFocusMultipleUserMessage",
              "condition": "data.mbomCheckoutInfo.anySelectionsCheckedOutByAnotherUser === false && !data.mbomCheckoutInfo.singleSelectionCheckoutInfo.objectName && !data.mbomCheckoutInfo.allSelectionsCheckedOutByCurrentUser"
            }
          ]
        },
        "deps": "js/mbmTreeService"
      },
      "updateEquivalentAssignmentDomains": {
        "actionType": "JSFunctionAsync",
        "method": "updateEquivalentAssignmentDomains",
        "inputData": {
          "sourceObject": "{{ctx.ebomContext.selectedModelObjects}}",
          "actionType": "Update"
        },
        "events": {
          "success": [
            {
              "name": "ebomTreeTable.plTable.reload"
            },
            {
              "name": "mbomTreeTable.plTable.reload"
            }
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmAssignmentUpdateSuccessMessage"
            }
          ]
        },
        "deps": "js/mbmTreeService"
      },
      "mbmFocusCommandToggleBatchAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmUpdateFocusCommandToggleAction"
          },
          {
            "action": "mbmFocus",
            "condition": "conditions.isFocusCommandSelect"
          },
          {
            "action": "mbmUnFocus",
            "condition": "conditions.isUnFocusCommandSelect"
          },
          {
            "action": "mbmEvaluateOnDemandCompareToggleInfo",
            "condition": "conditions.isMbmOnDemandComparePreference"
          },
          {
            "action": "mbmSetOnDemandCompareToggleInfo",
            "condition": "conditions.isMbmOnDemandComparePreference"
          },
          {
            "action": "updateStructureSearchConfig"
          },
          {
            "action": "closeFindPanel"
          }
        ]
      },
      "mbmCheckoutAndFocusBatchAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmPerformCheckout"
          },
          {
            "action": "mbmFocusCommandToggleBatchAction"
          }
        ]
      },
      "mbmPerformCheckout": {
        "actionType": "TcSoaService",
        "serviceName": "Core-2006-03-Reservation",
        "method": "checkout",
        "inputData": {
          "objects": "{{data.mbomCheckoutInfo.checkoutInput}}"
        },
        "outputData": {
          "checkOutPartialErrors": "partialErrors"
        },
        "actionMessages": {
          "failure": [
            {
              "condition": "(ctx.mbomContext.selectedModelObjects && ctx.mbomContext.selectedModelObjects.length === 1)",
              "message": "checkoutFailureSingle"
            },
            {
              "condition": "(ctx.mbomContext.selectedModelObjects && ctx.mbomContext.selectedModelObjects.length > 1)",
              "message": "checkoutFailureMultiple"
            }
          ]
        }
      },
      "closeFindPanel": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {
              "name": "awsidenav.openClose",
              "inputData": {
                "id": "aw_navigation",
                "commandId": "Awb0AceUnifiedInContextSearch"
              }
            }
          ]
        }
      },
      "updateStructureSearchConfig": {
        "actionType": "JSFunction",
        "method": "updateStructureSearchConfig",
        "deps": "js/mbmTreeService"
      },
      "mbmUpdateFocusCommandToggleAction": {
        "actionType": "JSFunction",
        "method": "updateFocusMode",
        "inputData": {
          "contextKey": "{{commandContext.viewKey}}"
        },
        "events": {
          "success": [
            {
              "name": "mbm.focusModeUpdatedEvent"
            }
          ]
        },
        "deps": "js/mbmTreeService"
      },
      "mbmFocus": {
        "actionType": "JSFunction",
        "method": "focus",
        "inputData": {
          "selectedElement": "{{ctx.mbomContext.selectedModelObjects}}",
          "focusInfo": [
            {
              "contextKey": "ebomContext",
              "viewerKey": "awDefaultViewer",
              "criteriaType": "MbmShowScopedLinesInEbom"
            },
            {
              "contextKey": "mbomContext",
              "viewerKey": "awStructureCompareViewer",
              "criteriaType": "MbmShowScopedLinesInMbom"
            }
          ]
        },
        "deps": "js/mbmTreeService"
      },
      "mbmUnFocus": {
        "actionType": "JSFunction",
        "method": "unFocus",
        "inputData": {
          "contextKeys": [
            "ebomContext",
            "mbomContext"
          ]
        },
        "deps": "js/mbmTreeService"
      },
      "mbmEvaluateOnDemandCompareToggleInfo": {
        "actionType": "JSFunction",
        "method": "evaluateOnDemandCompareToggleInfo",
        "outputData": {
          "evaluatedOnDemandCompareToggleInfo": ""
        },
        "deps": "js/mbmOnDemandCompareService"
      },
      "mbmSetOnDemandCompareToggleInfo": {
        "actionType": "JSFunction",
        "method": "setOnDemandCompareToggleInfo",
        "inputData": {
          "showAssignmentState": "{{data.evaluatedOnDemandCompareToggleInfo.showAssignmentState}}",
          "selectionState": "{{data.evaluatedOnDemandCompareToggleInfo.selectionState}}"
        },
        "deps": "js/mbmOnDemandCompareService"
      },
      "mbmShow3DViewerToggleAction": {
        "actionType": "JSFunction",
        "method": "mbmToggleAlignmentContent",
        "deps": "js/mbmViewUtils",
        "inputData": {
          "contextKey": "{{commandContext.viewKey}}"
        }
      },
      "mbm3DViewerFullScreenAction": {
        "actionType": "JSFunction",
        "method": "mbmToggle3DViewerFullScreenMode",
        "deps": "js/mbm3DViewerFullViewModeService",
        "inputData": {
          "svInstance": "{{commandContext.svInstance}}"
        },
        "events": {
          "success": [
            {
              "name": "commandBarResized"
            }
          ]
        }
      },
      "mbmNavigateToAlignEbomMbomPage": {
        "actionType": "Navigate",
        "navigateTo": "multiBOMManager",
        "navigationParams": {
          "cc_uid": "{{data.eventData.workPackage.uid}}"
        },
        "navigateIn": "{{data.eventData.navigationType}}"
      },
      "OpenInMbmAlignPage": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": "{{ctx.selected}}",
            "navigationType": "_self"
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidated"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "validateMbmLicense": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": {
              "$adapt": "{{commandContext.vmo}}"
            },
            "navigationType": "_self"
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidated"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "evaluateToOpenWorkpackage": {
        "actionType": "JSFunction",
        "method": "evaluateToOpenWorkpackage",
        "inputData": {
          "modelObject": "{{data.mbmOpenWPContext.modelObject}}"
        },
        "outputData": {
          "workPackageInfo": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.navigateToAlignEbomMbomPage",
              "eventData": {
                "workPackage": "{{data.workPackageInfo.workPackage}}",
                "navigationType": "{{data.mbmOpenWPContext.navigationType}}"
              },
              "condition": "data.workPackageInfo.isEbomMbomLinked === true && data.workPackageInfo.associatedCnObjects.length===0"
            },
            {
              "name": "mbm.openAccociateCnWpPopupEvent",
              "eventData": {
                "workPackage": "{{data.workPackageInfo.workPackage}}",
                "associatedCnObjects": "{{data.workPackageInfo.associatedCnObjects}}",
                "navigationType": "{{data.mbmOpenWPContext.navigationType}}",
                "navigateTo": "multiBOMManager"
              },
              "condition": "data.workPackageInfo.isEbomMbomLinked === true && data.workPackageInfo.associatedCnObjects.length>0"
            }
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmWorkPackageOpenFailureMessage",
              "condition": "data.workPackageInfo.isEbomMbomLinked === false"
            }
          ]
        },
        "deps": "js/openWPService"
      },
      "evaluateRemoveScopeCommandAction": {
        "actionType": "JSFunction",
        "method": "evaluateObjectForRemoveScope",
        "inputData": {
          "modelObject": "{{ctx.mbomContext.selectedModelObjects[0]}}"
        },
        "outputData": {
          "evaluatedRemoveScopeObject": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.openMultipleRemoveScopePopupEvent",
              "eventData": {
                "modelObject": "{{evaluatedRemoveScopeObject.assignmentScopeInfo.targetObject}}"
              },
              "condition": "evaluatedRemoveScopeObject.isMultipleEbomScope === true"
            }
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "removeAssignmentScope",
              "condition": "evaluatedRemoveScopeObject.isMultipleEbomScope === false"
            }
          ]
        },
        "deps": "js/mbmScopingService"
      },
      "mbmRemoveScopeCommandAction": {
        "actionType": "JSFunctionAsync",
        "method": "removeScope",
        "inputData": {
          "sourceObject": "{{data.evaluatedRemoveScopeObject.assignmentScopeInfo.targetObject.props.mbm0AssignmentDomain.dbValues}}",
          "targetObject": "{{data.evaluatedRemoveScopeObject.assignmentScopeInfo.targetObject}}",
          "actionType": "removeAllScopes"
        },
        "events": {
          "success": [
            {
              "name": "mbm.reloadSubContextDetailsEvent"
            }
          ]
        },
        "deps": "js/mbmScopingService"
      },
      "openWPFromRightWall": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": "{{ctx.selected}}",
            "navigationType": "_self"
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidated"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "openWPInNewTab": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": "{{ctx.selected}}",
            "navigationType": "newTab"
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidated"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "openWPInNewWindow": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": "{{ctx.selected}}",
            "navigationType": "newWindow"
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidated"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "openECNInpopup": {
        "actionType": "JSFunctionAsync",
        "method": "validateMbmLicense",
        "inputData": {
          "workPackageContext": {
            "modelObject": "{{ctx.selected}}",
            "navigationType": ""
          }
        },
        "outputData": {
          "mbmOpenWPContext": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.licenseValidatedLoadImapctedWP"
            }
          ]
        },
        "deps": "js/mbmLicenseService"
      },
      "mbmCutContentsToClipboardBatchAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmEvaluateObjectsToCutOrCopy"
          },
          {
            "action": "mbmUpdateCutIndication",
            "condition": "data.evaluatedCutCopyMbomTreeNodes && data.evaluatedCutCopyMbomTreeNodes.length >= 1"
          },
          {
            "action": "mbmCutFromContextMenuAction",
            "condition": "data.evaluatedCutCopyMbomTreeNodes && data.evaluatedCutCopyMbomTreeNodes.length >= 1"
          }
        ]
      },
      "mbmCopyContentsToClipboardBatchAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmEvaluateObjectsToCutOrCopy"
          },
          {
            "action": "mbmCopyFromContextMenuAction",
            "condition": "data.evaluatedCutCopyMbomTreeNodes && data.evaluatedCutCopyMbomTreeNodes.length >= 1"
          }
        ]
      },
      "mbmEvaluateObjectsToCutOrCopy": {
        "actionType": "JSFunction",
        "method": "evaluateObjectsToCut",
        "inputData": {
          "modelObject": "{{ctx.mbomContext.vmc.loadedVMObjects}}"
        },
        "outputData": {
          "evaluatedCutCopyMbomTreeNodes": ""
        },
        "deps": "js/mbmCutCopyPasteService"
      },
      "mbmUpdateCutIndication": {
        "actionType": "JSFunction",
        "method": "resetAndUpdateCutIndications",
        "inputData": {
          "modelObject": "{{data.evaluatedCutCopyMbomTreeNodes}}"
        },
        "deps": "js/mbmCutCopyPasteService"
      },
      "mbmCutFromContextMenuAction": {
        "actionType": "JSFunction",
        "method": "mbmCut",
        "inputData": {
          "modelObjects": "{{data.evaluatedCutCopyMbomTreeNodes}}"
        },
        "events": {
          "success": [
            {
              "name": "mbomTreeTable.plTable.clientRefresh"
            }
          ]
        },
        "deps": "js/mbmCutCopyPasteService"
      },
      "mbmCopyFromContextMenuAction": {
        "actionType": "JSFunction",
        "method": "mbmCopy",
        "inputData": {
          "modelObject": "{{data.evaluatedCutCopyMbomTreeNodes}}"
        },
        "events": {
          "success": [
            {
              "name": "mbomTreeTable.plTable.clientRefresh"
            }
          ]
        },
        "deps": "js/mbmCutCopyPasteService"
      },
      "mbmPasteAfterCutFromClipboardBatchAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmPasteAfterCutFromClipboardAction"
          },
          {
            "action": "mbmResetCutDataInCtx"
          }
        ]
      },
      "mbmPasteAfterCutFromClipboardAction": {
        "actionType": "JSFunction",
        "method": "moveMbomParts",
        "deps": "js/mbmAssignPartsHandler",
        "inputData": {
          "sourceObject": "{{data.evaluatedCutCopyMbomTreeNodes}}",
          "targetObject": "{{ctx.mbomContext.selectedModelObjects[0]}}",
          "actionType": "Move"
        }
      },
      "mbmResetCutDataInCtx": {
        "actionType": "JSFunction",
        "method": "resetCutDataInCtx",
        "inputData": {},
        "deps": "js/mbmCutCopyPasteService"
      },
      "mbmPasteAfterCopyFromClipboardAction": {
        "actionType": "JSFunctionAsync",
        "method": "pasteAfterCopy",
        "inputData": {
          "sourceObjects": "{{data.evaluatedCutCopyMbomTreeNodes}}",
          "targetObject": "{{ctx.mbomContext.selectedModelObjects[0]}}"
        },
        "deps": "js/mbmCutCopyPasteService"
      },
      "mbmAssignFromEbomToMbomCommandAction": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {
              "name": "mbm.assignFromEbomToMbomEvent",
              "condition": "ctx.ebomContext.asyncMode === false"
            }
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "assignFromEbomToMbomInBackgroundMessage",
              "condition": "ctx.ebomContext.asyncMode === true"
            }
          ]
        }
      },
      "mbmAssignFromEbomToMbomAction": {
        "actionType": "JSFunction",
        "method": "assignFromEbomToMbom",
        "inputData": {
          "sourceObjects": "{{ctx.ebomContext.calculatedSelectedObjects}}",
          "targetObject": "{{ctx.mbomContext.selectedModelObjects[0]}}",
          "actionType": "Add",
          "reference": "#assignFromEbomToMbomCommand",
          "Async": "{{ctx.ebomContext.asyncMode}}"
        },
        "deps": "js/mbmAssignPartsHandler"
      },
      "mbmSetEbomBottomLayout": {
        "actionType": "JSFunction",
        "method": "mbmSet3DLayout",
        "inputData": {
          "contextKey": "ebomContext",
          "isShow3DInBottom": true
        },
        "deps": "js/mbmViewUtils"
      },
      "mbmSetEbomSideLayout": {
        "actionType": "JSFunction",
        "method": "mbmSet3DLayout",
        "inputData": {
          "contextKey": "ebomContext",
          "isShow3DInBottom": false
        },
        "deps": "js/mbmViewUtils"
      },
      "mbmSetMbomBottomLayout": {
        "actionType": "JSFunction",
        "method": "mbmSet3DLayout",
        "inputData": {
          "contextKey": "mbomContext",
          "isShow3DInBottom": true
        },
        "deps": "js/mbmViewUtils"
      },
      "mbmSetMbomSideLayout": {
        "actionType": "JSFunction",
        "method": "mbmSet3DLayout",
        "inputData": {
          "contextKey": "mbomContext",
          "isShow3DInBottom": false
        },
        "deps": "js/mbmViewUtils"
      },
      "processColumnsArrangeSettings": {
        "actionType": "JSFunction",
        "method": "processColumnsArrangeSettings",
        "inputData": {
          "dataProvider": "{{commandContext.dataProvider}}",
          "gridId": "{{commandContext.gridId}}",
          "gridOptions": "{{commandContext.gridOptions}}"
        },
        "events": {
          "success": [
            {
              "name": "openArrangePanelBasic"
            }
          ]
        },
        "deps": "js/mbmColumnArrangeService"
      },
      "removeCmdAction": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {}
          ]
        },
        "actionMessages": {
          "success": [
            {
              "condition": "ctx.mbomContext.asyncMode === false && ctx.mbomContext.calculatedSelectedObjects.length === 1",
              "message": "removeSingleFromMbom"
            },
            {
              "condition": "ctx.mbomContext.asyncMode === false && ctx.mbomContext.calculatedSelectedObjects.length > 1 && ctx.mbomContext.topElementSelected === false",
              "message": "removeMultiplefromMbom"
            },
            {
              "condition": "ctx.mbomContext.asyncMode === true && ctx.mbomContext.topElementSelected === false",
              "message": "RemoveInBackgroundMessage"
            },
            {
              "condition": "(ctx.mbomContext.asyncMode === true || ctx.mbomContext.asyncMode === false )&& ctx.mbomContext.topElementSelected === true",
              "message": "RemoveMessageExcludingRoot"
            }
          ]
        }
      },
      "mbmMbomStartTreeEdit": {
        "actionType": "JSFunction",
        "method": "execute",
        "deps": "js/startEditGroupCommandService",
        "inputData": {
          "handleContext": "{{ctx.mbomContext.vmc.name}}",
          "view": "{{ctx.ViewModeContext.ViewModeContext}}"
        }
      },
      "mbmAlignCommandAction": {
        "actionType": "JSFunction",
        "method": "evaluateAlignObjects",
        "inputData": {
          "SelectedEbomElements": "{{ctx.mselected}}"
        },
        "outputData": {
          "isRootIncluded": ""
        },
        "actionMessages": {
          "success": [
            {
              "condition": "ctx.ebomContext.selectedModelObjects.length === 1 && ctx.mbomContext.selectedModelObjects.length === 1 && data.isRootIncluded === false ",
              "message": "AlignSingleFromEbomAndMbom"
            },
            {
              "condition": "ctx.ebomContext.selectedModelObjects.length > 1 && ctx.mbomContext.selectedModelObjects.length === 1 && data.isRootIncluded === false",
              "message": "AlignMultipleFromEbomAndSingleFromMbom"
            },
            {
              "condition": "ctx.ebomContext.selectedModelObjects.length === 1 && ctx.mbomContext.selectedModelObjects.length > 1 && data.isRootIncluded === false",
              "message": "AlignSingleFromEbomAndMultipleFromMbom"
            },
            {
              "condition": "ctx.ebomContext.selectedModelObjects.length > 1 && ctx.mbomContext.selectedModelObjects.length > 1 && data.isRootIncluded === false",
              "message": "AlignMultipleFromEbomAndMultipleFromMbom"
            }
          ]
        },
        "deps": "js/mbmAlignService"
      },
      "mbmLoadValidateEffectivityData": {
        "actionType": "JSFunctionAsync",
        "method": "mbmLoadValidateEffectivityData",
        "inputData": {
          "selectedObjects": "{{ctx.ebomContext.selectedModelObjects}}",
          "loadType": "MbmEffectivityCoverage"
        },
        "outputData": {
          "validateEffectivityData": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.showValidateEffectivityPopup",
              "condition": "data.validateEffectivityData"
            }
          ]
        },
        "deps": "js/mbmValidateEffectivityService"
      },
      "mbmShowValidateEffectivityPopup": {
        "actionType": "JSFunction",
        "method": "showLargePopup",
        "inputData": {
          "params": {
            "declView": "mbmValidateEffectivityPopup",
            "locals": {},
            "options": {
              "clickOutsideToClose": false,
              "customClass": "aw-epInstructionsEffectivity-wiValidateEffectivityPopup"
            },
            "subPanelContext": {
              "viewName": "epValidateEffectivity",
              "header": {
                "title": "{{i18n.mbmValidateEffectivityTitle}}",
                "subtitle": "{{i18n.mbmValidateEffectivityPopupSubHeader}}",
                "iconName": "cmdValidateEffectivityCoverage"
              },
              "validateEffectivityData": "{{data.validateEffectivityData}}",
              "configData": {
                "rowObjectNameProp": "awb0ArchetypeRevName",
                "isShowParentName": true,
                "rowName": "{{i18n.mbmEbomRangeRowTitle}}",
                "unitWithGap": "aw-mbm-unitWithGap",
                "unitWithOverlap": "aw-mbm-unitWithOverlap",
                "unitWithEffectivity": "aw-mbm-unitWithEffectivity",
                "unitWithMissingGap": "aw-mbm-unitWithMissingGap",
                "unitWithMissing": "aw-mbm-unitWithMissing",
                "defaultUnit": "aw-mbm-defaultUnit"
              },
              "message": [
                {
                  "text": "{{i18n.mbmPartYetNotAssigned}}"
                }
              ]
            }
          }
        },
        "deps": "js/mfeLargePopupUtils"
      },
      "mbmMbomSaveEdits": {
        "actionType": "JSFunctionAsync",
        "method": "saveEdits",
        "deps": "js/editHandlerService",
        "inputData": {
          "handleContext": "{{ctx.mbomContext.vmc.name}}"
        }
      },
      "loadImpactedWorkPackage": {
        "actionType": "JSFunctionAsync",
        "method": "loadImpactedWorkPackage",
        "deps": "js/mbmChangeNoticeService",
        "inputData": {
          "currentECN": "{{ctx.selected}}"
        },
        "outputData": {
          "mbmImpactedWpResponse": ""
        },
        "events": {
          "success": [
            {
              "condition": "data.mbmImpactedWpResponse.totalFound >0",
              "name": "mbmOpenImpactedWorkpackagePopupEvent"
            }
          ]
        },
        "actionMessages": {
          "success": [
            {
              "condition": "data.mbmImpactedWpResponse.totalFound === 0",
              "message": "mbmNoImpactedworkPackageMessage"
            }
          ]
        }
      },
      "mbmOpenImpactedWorkpackagePopup": {
        "actionType": "JSFunctionAsync",
        "method": "showManufacturingChangePopup",
        "inputData": {
          "data": {
            "declView": "mbmMfgImpactPopup",
            "options": {
              "clickOutsideToClose": false
            },
            "subPanelContext": {
              "contextObject": "{{ctx.selected}}",
              "mbmImpactedWorkPankages": "{{data.mbmImpactedWpResponse.impactedWorkPackages}}"
            }
          }
        },
        "outputData": {
          "mbmCNPopupRef": ""
        },
        "deps": "js/mbmChangeNoticePopupUtils"
      },
      "mbmImpactedWorkpackagePopupClose": {
        "actionType": "JSFunction",
        "method": "hideManufacturingChangePopup",
        "inputData": {
          "popupElement": "{{data.mbmCNPopupRef}}"
        },
        "deps": "js/mbmChangeNoticePopupUtils"
      },
      "mbmAssociateChangeNoticeUpdateWorkPackageAction": {
        "actionType": "TcSoaService",
        "serviceName": "Core-2006-03-DataManagement",
        "method": "createRelations",
        "inputData": {
          "input": [
            {
              "clientId": "AW_Client",
              "relationType": "CMReferences",
              "primaryObject": {
                "uid": "{{ctx.mbmChangeNotice.contextObject.uid}}",
                "type": "{{ctx.mbmChangeNotice.contextObject.type}}"
              },
              "secondaryObject": {
                "uid": "{{commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects[0].uid}}",
                "type": "{{commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects[0].type}}"
              }
            }
          ]
        },
        "events": {
          "success": [
            {
              "name": "mbm.associateWorkpackageSuccessEvent",
              "eventData": {
                "workpackageToUpdate": "{{commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects[0]}}"
              }
            }
          ]
        },
        "policy": {
          "types": [
            {
              "name": "MECollaborationContext",
              "properties": [
                {
                  "name": "mbm0AssociatedActiveCNs"
                }
              ]
            }
          ]
        }
      },
      "mbmAssociateWorkpackageSuccessAction": {
        "actionType": "JSFunction",
        "method": "mbmUpdateChangeNoticeStatus",
        "inputData": {
          "workpackageToUpdate": "{{data.eventData}}"
        },
        "deps": "js/mbmChangeNoticeService"
      },
      "mbmEvaluateToNavigateWorkpackageFromMfgImpactCNAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "filterMCNFromVMO"
          },
          {
            "action": "loadCMImplementsOfContext"
          },
          {
            "action": "mbmEvaluateToNavigateWorkpackageFromMfgImpactCNAct"
          },
          {
            "action": "loadRelatedMcnsProp"
          },
          {
            "action": "mbmNavigateToMbmAlignmentPageWithCNAction",
            "condition": "!data.mbmEvaluationInfo.error && data.activeMcns && ctx.preferences.EP_SplitChangeNotice[0] === 'MBOM' "
          },
          {
            "action": "mbmNavigateToMbmAlignmentPageWithCNAction",
            "condition": "!data.mbmEvaluationInfo.error && data.mbmEvaluationInfo.status !== 'mbmWorkpackageNotAssociated' && data.mbmEvaluationInfo.status !== 'mbmReadOnly'"
          },
          {
            "action": "showMCNNotExistError",
            "condition": "data.mbmEvaluationInfo.error === 'error'"
          }
        ]
      },
      "loadRelatedMcnsProp": {
        "actionType": "JSFunction",
        "method": "getProperties",
        "inputData": {
          "uids": [
            "{{data.activeMcns}}"
          ],
          "propNames": [
            "CMImplements"
          ],
          "activeMCN": "{{data.activeMcns}}"
        },
        "deps": "soa/dataManagementService"
      },
      "loadCMImplementsOfContext": {
        "actionType": "JSFunction",
        "method": "getProperties",
        "inputData": {
          "uids": [
            "{{ctx.mbmChangeNotice.contextObject.uid}}"
          ],
          "propNames": [
            "CMImplements"
          ]
        },
        "deps": "soa/dataManagementService"
      },
      "mbmEvaluateToNavigateWorkpackageFromMfgImpactCNAct": {
        "actionType": "JSFunction",
        "method": "mbmEvaluateToNavigateWorkpackage",
        "inputData": {
          "activeCN": "{{ctx.mbmChangeNotice.contextObject}}",
          "workpackageToOpen": "{{commandContext.vmo}}",
          "activeMCN": "{{data.activeMcns}}",
          "data": "{{data}}"
        },
        "outputData": {
          "mbmEvaluationInfo": ""
        },
        "actionMessages": {
          "success": [
            {
              "condition": "data.mbmEvaluationInfo.status === 'mbmWorkpackageNotAssociated' && !data.activeMcns && ctx.preferences.EP_SplitChangeNotice && ctx.preferences.EP_SplitChangeNotice[0] !== 'MBOM'",
              "message": "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithCN"
            },
            {
              "condition": "data.mbmEvaluationInfo.status === 'mbmWorkpackageNotAssociated' && !data.activeMcns && !ctx.preferences.EP_SplitChangeNotice",
              "message": "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithCN"
            },
            {
              "condition": "data.mbmEvaluationInfo.status === 'mbmWorkpackageNotAssociated' && !data.activeMcns &&  ctx.preferences.EP_SplitChangeNotice[0] === 'MBOM'",
              "message": "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithMCN"
            },
            {
              "condition": "data.mbmEvaluationInfo.status === 'mbmReadOnlyAndWorkpackageAssociated'",
              "message": "mbmConfirmMessageforNavigateAssociatedWorkpackageAndReadonlyCN"
            },
            {
              "condition": "data.mbmEvaluationInfo.status === 'mbmReadOnly' && !data.activeMcns",
              "message": "mbmConfirmMessageforNavigateReadonlyCNWorkpackage"
            }
          ]
        },
        "deps": "js/mbmChangeNoticeService"
      },
      "mbmAssociateAndActivateChangeNoticeAction": {
        "actionType": "TcSoaService",
        "serviceName": "Core-2006-03-DataManagement",
        "method": "createRelations",
        "inputData": {
          "input": [
            {
              "clientId": "AW_Client",
              "relationType": "CMReferences",
              "primaryObject": {
                "uid": "{{data.mbmEvaluationInfo.ecn.uid}}",
                "type": "{{data.mbmEvaluationInfo.ecn.type}}"
              },
              "secondaryObject": {
                "uid": "{{data.mbmEvaluationInfo.workpackage.uid}}",
                "type": "{{data.mbmEvaluationInfo.workpackage.type}}"
              }
            }
          ]
        },
        "events": {
          "success": [
            {
              "name": "mbm.activateActiveChangeNoticeEvent"
            }
          ]
        }
      },
      "mbmNavigateToMbmAlignmentPageWithCNAction": {
        "actionType": "Navigate",
        "navigateTo": "multiBOMManager",
        "navigationParams": {
          "cc_uid": "{{data.mbmEvaluationInfo.workpackage.uid}}",
          "impacting_cn": "{{data.mbmEvaluationInfo.ecn.uid}}",
          "tracking_cn": "{{data.mbmEvaluationInfo.mcn}}"
        }
      },
      "mbmNavigateToMbmAlignmentPageWithCNAssociateAction": {
        "actionType": "Navigate",
        "navigateTo": "multiBOMManager",
        "navigationParams": {
          "cc_uid": "{{data.mbmEvaluationInfo.workpackage.uid}}",
          "impacting_cn": "{{data.mbmEvaluationInfo.ecn.uid}}",
          "tracking_cn": "{{data.mbmEvaluationInfo.ecn.uid}}"
        }
      },
      "mbmScopeCommandAction": {
        "actionType": "JSFunctionAsync",
        "method": "setScope",
        "inputData": {
          "sourceObjects": "{{ctx.ebomContext.selectedModelObjects}}",
          "targetObject": "{{ctx.mbomContext.selectedModelObjects[0]}}",
          "actionType": "Scope"
        },
        "events": {
          "success": [
            {
              "name": "mbm.reloadSubContextDetailsEvent"
            }
          ]
        },
        "deps": "js/mbmAssignPartsHandler"
      },
      "mbmShowRemoveScopePopupAction": {
        "actionType": "JSFunction",
        "method": "show",
        "inputData": {
          "data": {
            "declView": "mbmRemoveScopePopup",
            "locals": {
              "caption": "{{i18n.mbmRemoveScopeCommandTitle}}"
            },
            "options": {
              "customClass": "aw-mbm-removeScopePopup",
              "height": "fit-content",
              "width": 320
            },
            "subPanelContext": {
              "assignmentScopeInfo": "{{data.evaluatedRemoveScopeObject.assignmentScopeInfo}}"
            }
          }
        },
        "deps": "js/popupService"
      },
      "mbmNavigateToMbmAlignmentPage": {
        "actionType": "Navigate",
        "navigateTo": "multiBOMManager",
        "navigationParams": {
          "cc_uid": "{{data.mbmEvaluationInfo.workpackage.uid}}"
        }
      },
      "mbmReviseElementAction": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {}
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "showReviseConfirmationMessage",
              "condition": "ctx.mbomContext.selectedModelObjects.length === 1"
            },
            {
              "message": "showReviseMultipleElementsConfirmationMessage",
              "condition": "ctx.mbomContext.selectedModelObjects.length > 1"
            }
          ]
        }
      },
      "mbmRevisePreProcessAction": {
        "actionType": "JSFunction",
        "method": "preprocessAndCreateReviseInput",
        "deps": "js/mbmReviseService",
        "inputData": {
          "selectedObject": "{{ctx.mselected}}",
          "parent": "{{ctx.taskPageContext.cnObject.uid}}"
        },
        "outputData": {
          "reviseInput": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.revisePreProcessSucessEvent"
            }
          ]
        }
      },
      "mbmReviseSoaCallAction": {
        "actionType": "TcSoaService",
        "serviceName": "Core-2013-05-DataManagement",
        "method": "reviseObjects",
        "inputData": {
          "reviseIn": "{{data.reviseInput}}"
        },
        "outputData": {
          "revisedObjects": "reviseTrees",
          "partialErorrs": "partialErrors"
        },
        "events": {
          "success": [
            {
              "name": "mbm.reviseSoaSuccess",
              "eventData": {
                "selectedObjects": "{{ctx.mselected}}",
                "revisedObjects": "{{data.revisedObjects}}"
              }
            }
          ]
        },
        "actionMessages": {
          "failure": [
            {
              "message": "reviseFailureMsg",
              "condition": "errorCode.code===48071 || errorCode.code===51003 || errorCode.code===48020"
            },
            {
              "message": "mbmReviseFailureMsg",
              "condition": "errorCode.code!==48071 && errorCode.code!==51003 && errorCode.code!==48020"
            }
          ]
        },
        "deps": "js/Awp0ShowSaveAsService"
      },
      "mbmPostReviseSoaSuccess": {
        "actionType": "JSFunction",
        "method": "reloadRevisedObjects",
        "inputData": {
          "eventData": "{{data.eventData}}"
        },
        "deps": "js/mbmReviseService"
      },
      "mbmShowAssociateCnWorkpackagePopup": {
        "actionType": "JSFunction",
        "method": "show",
        "inputData": {
          "data": {
            "declView": "mbmShowAssociateCnWorkpackagePopup",
            "locals": {
              "caption": "{{i18n.mbmAssociateCnWpPopupTitle}}"
            },
            "subPanelContext": {
              "workPackage": "{{data.eventData.workPackage}}",
              "associatedCnObjects": "{{data.eventData.associatedCnObjects}}",
              "navigationType": "{{data.eventData.navigationType}}",
              "navigateTo": "{{data.eventData.navigateTo}}"
            }
          }
        },
        "outputData": {
          "popupId": "id"
        },
        "deps": "js/popupService"
      },
      "mbmPerformRemove": {
        "actionType": "JSFunction",
        "method": "getElementsToRemove",
        "inputData": {
          "AllElementsToRemove": "{{ctx.mselected}}"
        },
        "outputData": {
          "elementsToRemove": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.removeElements",
              "eventData": {
                "elementsToRemove": "{{data.elementsToRemove}}"
              }
            }
          ]
        },
        "deps": "js/mbmRemoveService"
      },
      "mbmRemoveElements": {
        "actionType": "JSFunction",
        "method": "removeElements",
        "inputData": {
          "elementsToRemove": "{{ctx.mbomContext.calculatedSelectedObjects}}",
          "Async": "{{ctx.mbomContext.asyncMode}}"
        },
        "deps": "js/mbmRemoveService"
      },
      "mbmRemoveElementsExcludingRoot": {
        "actionType": "JSFunction",
        "method": "removeElements",
        "inputData": {
          "removedObjects": "{{data.eventData.elementsToRemove}}"
        },
        "deps": "js/mbmRemoveService"
      },
      "evaluatePullPropagateChanges": {
        "actionType": "JSFunction",
        "method": "evaluatePropagateChanges",
        "inputData": {
          "selectedObjects": "{{ctx.mbomContext.selectedModelObjects}}",
          "contextKey": "mbomContext",
          "isPullPropagate": true
        },
        "outputData": {
          "evaluatedObject": ""
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmPullPropagateOverAssigneConfirmMessagesingle",
              "condition": "ctx.mbomContext.selectedModelObjects.length === 1 && data.evaluatedObject.hasOverAssigned && !data.evaluatedObject.outOfScope"
            },
            {
              "message": "mbmPullPropagateOverAssigneConfirmMessagemultiple",
              "condition": "ctx.mbomContext.selectedModelObjects.length > 1 && data.evaluatedObject.hasOverAssigned && !data.evaluatedObject.outOfScope"
            },
            {
              "message": "mbmPullPropagateOutofScopeConfirmMessagesingle",
              "condition": "ctx.mbomContext.selectedModelObjects.length === 1 && data.evaluatedObject.outOfScope"
            },
            {
              "message": "mbmPullPropagateOutofScopeConfirmMessagemultiple",
              "condition": "ctx.mbomContext.selectedModelObjects.length > 1 && data.evaluatedObject.outOfScope"
            }
          ]
        },
        "events": {
          "success": [
            {
              "name": "mbm.evaluatePropagateChangesCompleteEvent",
              "condition": "!data.evaluatedObject.hasOverAssigned"
            },
            {
              "name": "mbm.closePopup"
            }
          ]
        },
        "deps": "js/mbmComparePopupService"
      },
      "performPropagateChange": {
        "actionType": "JSFunctionAsync",
        "method": "pushPropagateChanges",
        "inputData": {
          "param": "{{data.evaluatedObject.objectsToPropagate}}"
        },
        "deps": "js/mbmPropagateService"
      },
      "mbmEvaluateComparePopupTitle": {
        "actionType": "JSFunction",
        "method": "getComparePopupTitle",
        "inputData": {
          "selectedObject": "{{ctx.mbomContext.selectedModelObjects[0]}}",
          "title": "{{i18n.mbmComparePopupTitle}}"
        },
        "outputData": {
          "popupTitle": ""
        },
        "events": {
          "success": [
            {
              "name": "mbm.evaluateComparePopupTitleCompleteEvent"
            },
            {
              "name": "mbm.closePopup"
            }
          ]
        },
        "deps": "js/mbmComparePopupService"
      },
      "showComparePopup": {
        "actionType": "JSFunction",
        "method": "show",
        "inputData": {
          "data": {
            "declView": "mbmComparePopup",
            "subPanelContext": {
              "selectedObject": "{{ctx.mbomContext.selectedModelObjects[0]}}"
            },
            "locals": {
              "caption": "{{data.popupTitle}}"
            },
            "options": {
              "customClass": "aw-mbm-comparePopup"
            }
          }
        },
        "outputData": {
          "popupId": "id"
        },
        "deps": "js/popupService"
      },
      "mbmPackElements": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {
              "name": "ace.activateWindow",
              "eventData": {
                "key": "{{commandContext.viewKey}}"
              }
            },
            {
              "name": "acePwaCommand.acePackElementsAction"
            },
            {
              "name": "mbm.packElementsInProgress"
            }
          ]
        }
      },
      "updatePackElementsInProgress": {
        "actionType": "JSFunction",
        "method": "updatePartialCtx",
        "inputData": {
          "path": "{{commandContext.viewKey+ '.packElementsInProgress'}}",
          "value": true
        },
        "deps": "js/appCtxService"
      },
      "mbmFindInEbomAction": {
        "actionType": "JSFunctionAsync",
        "method": "findEquivalentTargetInfo",
        "inputData": {
          "sourceUid": "{{ctx.mbomContext.selectedModelObjects[0].uid}}",
          "contextKey": "mbomContext",
          "displayPropName": "awb0Parent",
          "additionalPropNames": "",
          "parentLevelIndex": 3,
          "contextObjectKey": "ebomContext"
        },
        "outputData": {
          "targetInfoTofind": ""
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmFindInEbomPartialMissingPartMessage",
              "condition": "data.targetInfoTofind.objectsTofind.length ===0 && (data.targetInfoTofind.status === 68 || data.targetInfoTofind.status === 69)"
            },
            {
              "message": "mbmFindInEbomNotFoundPartMessage",
              "condition": "(!data.targetInfoTofind.status || data.targetInfoTofind.status === 55 || data.targetInfoTofind.status === 1)  && data.targetInfoTofind.objectsTofind.length === 0"
            },
            {
              "message": "mbmFindInEbomUnpackedPartMessage",
              "condition": "data.targetInfoTofind.status && data.targetInfoTofind.isPacked && data.targetInfoTofind.objectsTofind.length===1 &&  !data.targetInfoTofind.objectsTofind[0].isPacked"
            },
            {
              "message": "mbmPartialAssignOccMessage",
              "condition": "data.targetInfoTofind.isPackedLinePartiallyAssigned"
            }
          ]
        },
        "events": {
          "success": [
            {
              "name": "aceElementsDeSelectedEvent",
              "eventData": {
                "elementsToDeselect": "{{ctx.ebomContext.selectedModelObjects}}",
                "viewToReact": "ebomContext"
              },
              "condition": "data.targetInfoTofind.objectsTofind.length >0 && data.targetInfoTofind.inScope.length !==0"
            },
            {
              "name": "aceElementsSelectedEvent",
              "eventData": {
                "elementsToSelect": "{{data.targetInfoTofind.objectsTofind[0].objectToFind}}",
                "viewToReact": "ebomContext"
              },
              "condition": "data.targetInfoTofind.objectsTofind.length >0 && (data.targetInfoTofind.status && [1,55,67,68,69].indexOf(data.targetInfoTofind.status)<0) && (data.targetInfoTofind.isPacked && data.targetInfoTofind.objectsTofind[0].isPacked || !data.targetInfoTofind.isPacked)"
            },
            {
              "name": "aceElementsSelectedEvent",
              "eventData": {
                "elementsToSelect": "{{data.targetInfoTofind.objectsTofind[0].objectToFind}}",
                "viewToReact": "ebomContext"
              },
              "condition": "data.targetInfoTofind.inScope.length === 1 && data.targetInfoTofind.mode && !data.targetInfoTofind.isPackedLinePartiallyAssigned"
            },
            {
              "name": "mbm.findMultipleInMbomContextEvent",
              "eventData": {
                "objectsToShow": "{{data.targetInfoTofind.objectsTofind}}",
                "isPacked": "{{data.targetInfoTofind.isPacked}}",
                "sourceEvent": "{{data.eventMap['mbm.assignmentClickEvent'].event}}",
                "inScope": "{{data.targetInfoTofind.inScope}}",
                "outOfScope": "{{data.targetInfoTofind.outOfScope}}",
                "viewToReact": "ebomContext",
                "referenceForPopup": "#mbmFindInEBomCommand"
              },
              "condition": "data.targetInfoTofind.objectsTofind.length > 1"
            }
          ]
        },
        "deps": "js/mbmFindInService"
      },
      "mbmFindInMbomAction": {
        "actionType": "JSFunctionAsync",
        "method": "findEquivalentTargetInfo",
        "inputData": {
          "sourceUid": "{{ctx.ebomContext.selectedModelObjects[0].uid}}",
          "contextKey": "ebomContext",
          "displayPropName": "awb0Parent",
          "additionalPropNames": "",
          "parentLevelIndex": 3,
          "contextObjectKey": "mbomContext"
        },
        "outputData": {
          "targetInfoTofind": ""
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmFindInMbomNotFoundPartMessage",
              "condition": "data.targetInfoTofind.objectsTofind.length === 0 && (!data.targetInfoTofind.status || !data.targetInfoTofind.isPacked || data.targetInfoTofind.status ===3) "
            },
            {
              "message": "mbmEbomPartialAssignOccMessage",
              "condition": "(data.targetInfoTofind.isPackedLinePartiallyAssigned) || (data.targetInfoTofind.objectsTofind.length === 0 && data.targetInfoTofind.status && data.targetInfoTofind.status !==3 &&  data.targetInfoTofind.isPacked)"
            },
            {
              "message": "mbmFindInMbomUnpackedPartMessage",
              "condition": "data.targetInfoTofind.status && data.targetInfoTofind.isPacked && data.targetInfoTofind.inScope.length===1 &&  !data.targetInfoTofind.objectsTofind[0].isPacked"
            }
          ]
        },
        "events": {
          "success": [
            {
              "name": "aceElementsDeSelectedEvent",
              "eventData": {
                "elementsToDeselect": "{{ctx.mbomContext.selectedModelObjects}}",
                "viewToReact": "mbomContext"
              },
              "condition": "data.targetInfoTofind.inScope.length ===1 && data.targetInfoTofind.outOfScope.length === 0 && !data.targetInfoTofind.isPackedLinePartiallyAssigned"
            },
            {
              "name": "aceElementsSelectedEvent",
              "eventData": {
                "elementsToSelect": "{{data.targetInfoTofind.objectsTofind[0].objectToFind}}",
                "viewToReact": "mbomContext"
              },
              "condition": "(data.targetInfoTofind.inScope.length === 1 && data.targetInfoTofind.outOfScope.length === 0 && !data.targetInfoTofind.isPackedLinePartiallyAssigned) && (!data.targetInfoTofind.isPacked || data.targetInfoTofind.objectsTofind[0].isPacked)"
            },
            {
              "name": "mbm.findMultipleInMbomContextEvent",
              "eventData": {
                "objectsToShow": "{{data.targetInfoTofind.objectsTofind}}",
                "isPacked": "{{data.targetInfoTofind.isPacked}}",
                "sourceEvent": "{{data.eventMap['mbm.assignmentClickEvent'].event}}",
                "inScope": "{{data.targetInfoTofind.inScope}}",
                "outOfScope": "{{data.targetInfoTofind.outOfScope}}",
                "viewToReact": "mbomContext",
                "referenceForPopup": "#mbmFindInMBomCommand"
              },
              "condition": "(data.targetInfoTofind.outOfScope.length === 1 || data.targetInfoTofind.objectsTofind.length > 1) && !data.targetInfoTofind.isPackedLinePartiallyAssigned"
            }
          ]
        },
        "deps": "js/mbmFindInService"
      },
      "mbmFindInEbomUpackedConfirmation": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {
              "name": "aceElementsSelectedEvent",
              "eventData": {
                "elementsToSelect": "{{data.targetInfoTofind.objectsTofind[0].objectToFind}}",
                "viewToReact": "ebomContext"
              }
            }
          ]
        }
      },
      "mbmShowCreateMCNPopup": {
        "actionType": "JSFunction",
        "method": "show",
        "inputData": {
          "data": {
            "declView": "mbmCreateMCNPopup",
            "locals": {
              "caption": "{{i18n.mbmCreateMCNPopupTitle}}"
            },
            "options": {
              "height": "471",
              "width": "483",
              "forceCloseOthers": false
            },
            "subPanelContext": "{{commandContext.dataProviders.impactedWpTableDataProvider}}"
          }
        },
        "outputData": {
          "mbmCreateMCNPopupId": ""
        },
        "deps": "js/popupService"
      },
      "mbmShowCreateMCNAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "filterMCN"
          },
          {
            "action": "showMCNError",
            "condition": "conditions.isActiveMCN"
          },
          {
            "action": "mbmShowCreateMCNPopup",
            "condition": "conditions.noActiveMCN"
          }
        ]
      },
      "filterMCN": {
        "actionType": "JSFunctionAsync",
        "method": "filterMCN",
        "inputData": {
          "path": "{{commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects[0].props.mbm0AssociatedActiveCNs.dbValues}}",
          "workpackageToOpen": "{{ctx.selected}}",
          "data": "{{data}}"
        },
        "outputData": {
          "activeMcns": ""
        },
        "deps": "js/mbmChangeNoticeService"
      },
      "filterMCNFromVMO": {
        "actionType": "JSFunction",
        "method": "filterMCN",
        "inputData": {
          "path": "{{commandContext.vmo.props.mbm0AssociatedActiveCNs.dbValues}}",
          "workpackageToOpen": "{{commandContext.vmo}}",
          "data": "{{data}}"
        },
        "outputData": {
          "activeMcns": ""
        },
        "deps": "js/mbmChangeNoticeService"
      },
      "showMCNError": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {}
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "showMCNErrorMessage"
            }
          ]
        }
      },
      "showMCNNotExistError": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {}
          ]
        },
        "actionMessages": {
          "success": [
            {
              "message": "showMCNNotExistErrorMessage"
            }
          ]
        }
      },
      "updateMbomNodeToselectInCtx": {
        "actionType": "JSFunction",
        "method": "updatePartialCtx",
        "inputData": {
          "name": "ep.mbomNodeToSelect",
          "propNames": "{{ctx.ep.loadedProductObject}}"
        },
        "deps": "js/appCtxService"
      },
      "openMbmNotification": {
        "actionType": "JSFunction",
        "method": "openMbmNotification",
        "inputData": {
          "notificationObject": "{{commandContext.lineItem}}"
        },
        "events": {
          "success": [
            {
              "name": "NotificationMessage.markRead"
            }
          ]
        },
        "deps": "js/mbmTreeService"
      },
      "mbmMbomGetMultipleTargetObjectsForSource": {
        "actionType": "JSFunction",
        "method": "show",
        "inputData": {
          "data": {
            "declView": "mbmFindMultipleAssignedPopup",
            "subPanelContext": {
              "objectsToShow": "{{data.eventData.objectsToShow}}",
              "isPacked": "{{data.eventData.isPacked}}",
              "viewToReact": "{{data.eventData.viewToReact}}",
              "inScope": "{{data.eventData.inScope}}",
              "outOfScope": "{{data.eventData.outOfScope}}",
              "disableAssignedToOutOfScopeList": true
            },
            "options": {
              "clickOutsideToClose": true,
              "reference": "{{data.eventData.referenceForPopup}}",
              "forceCloseOthers": false,
              "detachMode": true
            }
          }
        },
        "outputData": {
          "popupId": "id"
        },
        "deps": "js/popupService"
      },
      "mbmClosePopup": {
        "actionType": "JSFunction",
        "method": "hide",
        "inputData": {
          "popupEl": "{{data.popupId}}"
        },
        "deps": "js/popupService"
      },
      "mbmEbomLaunchConfigurationPanelAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmActivateEbomStructureContext"
          },
          {
            "action": "epEbomOpenCloseConfigurationPanel"
          }
        ]
      },
      "mbmActivateEbomStructureContext": {
        "actionType": "JSFunction",
        "method": "activateStructureContext",
        "inputData": {
          "pciUid": "{{ctx.state.params.ebomPCI}}",
          "contextKey": "epTaskPageContext.ebomStructureContext",
          "structureKey": "epTaskPageContext.ebomStructure",
          "configFilterPanelTitle": "{{i18n.ebomStructureConfigurationPanelTitle}}"
        },
        "deps": "js/epStructureConfigurationService"
      },
      "mbmMbomLaunchConfigurationPanelAction": {
        "actionType": "batchJob",
        "steps": [
          {
            "action": "mbmActivateMbomStructureContext"
          },
          {
            "action": "epMbomOpenCloseConfigurationPanel"
          }
        ]
      },
      "mbmActivateMbomStructureContext": {
        "actionType": "JSFunction",
        "method": "activateStructureContext",
        "inputData": {
          "pciUid": "{{ctx.state.params.mbomPCI}}",
          "contextKey": "epTaskPageContext.mbomStructureContext",
          "structureKey": "epTaskPageContext.mbomStructure",
          "configFilterPanelTitle": "{{i18n.mbomStructureConfigurationPanelTitle}}"
        },
        "deps": "js/epStructureConfigurationService"
      },
      "mbmAlignElements": {
        "actionType": "JSFunctionAsync",
        "method": "alignElements",
        "inputData": {
          "sourceElement": "{{ctx.ebomContext.selectedModelObjects}}",
          "targetElement": "{{ctx.mbomContext.selectedModelObjects}}"
        },
        "outputData": {
          "alignedElements": ""
        },
        "actionMessages": {
          "success": [
            {
              "message": "mbmAlignSuccessMessage",
              "condition": "data.alignedElements && ((ctx.preferences.MBMEnableBOMFiltering && ctx.preferences.MBMEnableBOMFiltering[0] === 'true' && ctx.mbmFocusModeSelected === false) || (ctx.preferences.MBMOnDemandCompare && ctx.preferences.MBMOnDemandCompare[0] === 'true' && ctx.taskPageContext.onDemandCompareToggleInfo.selected === false))"
            },
            {
              "message": "mbmConfirmMessageforCompareEBOMandMBOM",
              "condition": "data.alignedElements && (!ctx.preferences.MBMEnableBOMFiltering || ctx.preferences.MBMEnableBOMFiltering[0] === 'false' || ctx.mbmFocusModeSelected === true) && (!ctx.preferences.MBMOnDemandCompare || ctx.preferences.MBMOnDemandCompare[0] === 'false' || ctx.taskPageContext.onDemandCompareToggleInfo.selected === true)"
            }
          ],
          "failure": [
            {
              "message": "mbmFailureMessage"
            }
          ]
        },
        "deps": "js/mbmAlignService"
      },
      "mbmperformCompare": {
        "actionType": "JSFunctionAsync",
        "method": "performCompare",
        "inputData": {
          "vmos": "{{ctx.mbomContext.vmc.loadedVMObjects}}",
          "contextKey": "mbomContext",
          "mode": "DoFreshCompare"
        },
        "deps": "js/mbmCompareService"
      },
      "mbmPerformEbomPartialCompare": {
        "actionType": "JSFunctionAsync",
        "method": "performCompare",
        "inputData": {
          "vmos": "{{ctx.ebomContext.vmc.loadedVMObjects}}",
          "contextKey": "ebomContext",
          "mode": "DoFreshCompare",
          "partialCompareObjects": "{{ctx.ebomContext.selectedModelObjects}}"
        },
        "deps": "js/mbmCompareService"
      },
      "mbmPerformMbomPartialCompare": {
        "actionType": "JSFunctionAsync",
        "method": "performCompare",
        "inputData": {
          "vmos": "{{ctx.mbomContext.vmc.loadedVMObjects}}",
          "contextKey": "mbomContext",
          "mode": "DoFreshCompare",
          "partialCompareObjects": "{{ctx.mbomContext.selectedModelObjects}}"
        },
        "deps": "js/mbmCompareService"
      },
      "mbmFindInUpackedConfirmation": {
        "actionType": "Event",
        "method": "Event",
        "inputData": {
          "events": [
            {
              "name": "mbm.findInTargetContextEvent",
              "eventData": {
                "targetContext": "mbomContext",
                "objectTofind": "{{data.targetInfoTofind.objectsTofind[0].objectToFind}}"
              }
            }
          ]
        }
      },
      "mbmValidationRunCommandAction": {
        "actionType": "JSFunction",
        "method": "runValidationChecks",
        "inputData": {
          "loadParams": [
            {
              "tagName": "mfgValidationClientIdentifier",
              "attributeName": "value",
              "attributeValue": "MBM"
            }
          ]
        },
        "deps": "js/epValidationTableService"
      }
    },
    "onEvent": [
      {
        "eventId": "mbm.findMultipleInMbomContextEvent",
        "cacheEventData": true,
        "action": "mbmMbomGetMultipleTargetObjectsForSource"
      },
      {
        "eventId": "mbm.closePopup",
        "action": "mbmClosePopup"
      },
      {
        "eventId": "mbmCreateBasedOnPreProcessingSuccessful",
        "action": "mbmLaunchCreateBasedOnPopupAction"
      },
      {
        "eventId": "mbm.navigateToAlignEbomMbomPage",
        "action": "mbmNavigateToAlignEbomMbomPage",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.navigateToAlignEbomMbomPageInNewTab",
        "action": "mbmNavigateToAlignEbomMbomPageInNewTab",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.navigateToAlignEbomMbomPageInNewWindow",
        "action": "mbmNavigateToAlignEbomMbomPageInNewWindow",
        "cacheEventData": true
      },
      {
        "eventId": "mbmOpenImpactedWorkpackagePopupEvent",
        "action": "mbmOpenImpactedWorkpackagePopup",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.associateWorkpackageSuccessEvent",
        "action": "mbmAssociateWorkpackageSuccessAction",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.openMultipleRemoveScopePopupEvent",
        "action": "mbmShowRemoveScopePopupAction",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.revisePreProcessSucessEvent",
        "action": "mbmReviseSoaCallAction"
      },
      {
        "eventId": "mbm.reviseSoaSuccess",
        "action": "mbmPostReviseSoaSuccess",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.openAccociateCnWpPopupEvent",
        "action": "mbmShowAssociateCnWorkpackagePopup",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.licenseValidated",
        "action": "evaluateToOpenWorkpackage",
        "cacheEventData": true
      },
      {
        "eventId": "mbm.licenseValidatedLoadImapctedWP",
        "action": "loadImpactedWorkPackage"
      },
      {
        "eventId": "mbm.removeElements",
        "cacheEventData": true,
        "action": "mbmRemoveElementsExcludingRoot"
      },
      {
        "eventId": "mbm.evaluatePropagateChangesCompleteEvent",
        "action": "performPropagateChange"
      },
      {
        "eventId": "mbm.evaluateComparePopupTitleCompleteEvent",
        "cacheEventData": true,
        "action": "showComparePopup"
      },
      {
        "eventId": "mbm.packElementsInProgress",
        "action": "updatePackElementsInProgress"
      },
      {
        "eventId": "mbm.activateActiveChangeNoticeEvent",
        "action": "mbmNavigateToMbmAlignmentPageWithCNAssociateAction"
      },
      {
        "eventId": "mbm.showValidateEffectivityPopup",
        "action": "mbmShowValidateEffectivityPopup"
      },
      {
        "eventId": "mbm.assignFromEbomToMbomEvent",
        "action": "mbmAssignFromEbomToMbomAction"
      }
    ],
    "conditions": {
      "isEBOMMBOMAlignmentAvailableInWorkspace": {
        "expression": {
          "$and": [
            {
              "$source": "ctx.workspace.availablePages",
              "$query": {
                "$in": [
                  "multiBOMManager"
                ]
              }
            },
            {
              "$source": "ctx.workspace.workspaceType",
              "$query": {
                "$eq": "Exclusive"
              }
            }
          ]
        }
      },
      "isEBOMMBOMAlignmentAllowedInWorkPackage": {
        "expression": {
          "$and": [
            {
              "$source": "ctx.preferences.EP_WorkPackageContentType",
              "$query": {
                "$in": [
                  "EBOM:Item",
                  "EBOM:ItemRevision",
                  "EBOM:PSBOMView",
                  "EBOM:PSBOMViewRevision"
                ]
              }
            },
            {
              "$source": "ctx.preferences.EP_WorkPackageContentType",
              "$query": {
                "$in": [
                  "MBOM:Item",
                  "MBOM:ItemRevision",
                  "MBOM:PSBOMView",
                  "MBOM:PSBOMViewRevision"
                ]
              }
            }
          ]
        }
      },
      "isEBOMMBOMAlignmentAllowedAndPageExistsInWorkspace": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isEBOMMBOMAlignmentAllowedInWorkPackage",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isEBOMMBOMAlignmentAvailableInWorkspace",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isCreateBasedOncommandEnable": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isMbomContext",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "ctx.mbomContext.selectedModelObjects.length",
              "$query": {
                "$eq": 1
              }
            },
            {
              "$source": "conditions.isTypeOfAwb0PositionedElementSelectedInMbom",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "ctx.mbomContext.isGreyedOutElementSelected",
              "$query": {
                "$ne": true
              }
            },
            {
              "$source": "ctx.mbomContext.topElementSelected",
              "$query": {
                "$ne": true
              }
            },
            {
              "$source": "ctx.mbomContext.scopeUids",
              "$query": {
                "$notin": "{{ctx.mbomContext.selectedObjectsUids}}"
              }
            }
          ]
        }
      },
      "isOpenMBMAlignmentTaskActive": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isOpenEasyPlanTaskCommandActiveAndVisible",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.IsValidWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isOpenMBMAlignmentTaskForManagementEnableOrVisible": {
        "expression": "conditions.isEbomMbomAvailable && !conditions.isBackgroundPartsPlanningSelected"
      },
      "isOpenMBMAlignmentTaskEnableOrVisible": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isEBOMMBOMPartOfWP",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isBackgroundPartsPlanningSelected",
              "$query": {
                "$eq": false
              }
            },
            {
              "$source": "conditions.isEBOMStructureAvailableInWP",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isMBOMStructureAvailableInWP",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isEBOMMBOMPartOfWP": {
        "expression": {
          "$source": "ctx.epTaskPageContext.productStructure.uid",
          "$query": {
            "$notNull": true
          }
        }
      },
      "isEBOMStructureAvailableInWP": {
        "expression": {
          "$source": "ctx.epTaskPageContext.ebomStructure.uid",
          "$query": {
            "$notNull": true
          }
        }
      },
      "isMBOMStructureAvailableInWP": {
        "expression": {
          "$source": "ctx.epTaskPageContext.mbomStructure.uid",
          "$query": {
            "$notNull": true
          }
        }
      },
      "isEbomMbomAvailable": {
        "expression": "ctx.epTaskPageContext.MbomStructureContext.uid && ctx.epTaskPageContext.EbomStructureContext.uid"
      },
      "isMBMAlignmentSelected": {
        "expression": "ctx.sublocation.nameToken === 'multiBOMManager:taskPageSubLocation'"
      },
      "isTableColumnArrangeIconVisible": {
        "expression": "commandContext.gridOptions.enableArrangeMenu && commandContext.isArrangeSupported && (commandContext.gridId === 'ebomTreeTable' || commandContext.gridId === 'mbomTreeTable')"
      },
      "mbmOpenWpCmdCondition": {
        "expression": {
          "$and": [
            {
              "$source": {
                "$adapt": "commandContext.vmo"
              },
              "$query": {
                "$source": "modelType.typeHierarchyArray",
                "$query": {
                  "$in": [
                    "MECollaborationContext"
                  ]
                }
              }
            },
            {
              "$source": "conditions.IsValidWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "IsValidWorkspaceSelectedAndETOWorkspaceSelected": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isETOWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.IsValidWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "mbmCCObjectOpenBaseVisibleCondition": {
        "expression": "(conditions.IsValidWorkspaceSelected && ctx.selected  && ctx.mselected && ctx.mselected.length === 1 && ctx.selected.modelType.typeHierarchyArray.indexOf( 'CCObject' ) > -1)"
      },
      "isMbmScopeCommandVisible": {
        "expression": "conditions.isMbmEnableBOMFiltering && !conditions.isFocusCommandSelect"
      },
      "IsMbmPartialCompareCmdVisible": {
        "expression": "(ctx.preferences.MBMEnableBOMFiltering[0] === 'true' && ctx.preferences.MBMOnDemandCompare[0] === 'true') && !(conditions.isFocusCommandSelect && ctx.taskPageContext.onDemandCompareToggleInfo.selected === true)"
      },
      "IsMbmEbomPartialCompareCmdEnable": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.ebomContext.isGreyedOutElementSelected"
      },
      "IsMbmMbomPartialCompareCmdEnable": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.mbomContext.isGreyedOutElementSelected"
      },
      "isMbmRemoveScopeCommandVisible": {
        "expression": "conditions.isMbmEnableBOMFiltering && !conditions.isFocusCommandSelect"
      },
      "isMbmRemoveScopeCommandEnable": {
        "expression": "ctx.mbmEnableFocus === true && ctx.mbomContext.selectedModelObjects.length === 1"
      },
      "isMBMAssignmentDomainMBOMTypesPrefObjectSelectedInMbom": {
        "expression": "ctx.mbomContext.selectedModelObjects[0].modelType && ctx.preferences.MBMAssignmentDomainMBOMTypes.indexOf(ctx.mbomContext.selectedModelObjects[0].props.awb0UnderlyingObjectType.dbValues[0]) > -1 "
      },
      "isMBMAssignmentDomainMBOMTypesPref": {
        "expression": "ctx.preferences.MBMAssignmentDomainMBOMTypes && ctx.preferences.MBMAssignmentDomainMBOMTypes[MBMAssignmentDomainMBOMTypes.length - 1] !== '' && conditions.isMbomContext"
      },
      "isMbmScopeCommandEnable": {
        "expression": "(!conditions.isMBMAssignmentDomainMBOMTypesPref || conditions.isMBMAssignmentDomainMBOMTypesPrefObjectSelectedInMbom ) && ctx.ebomContext.selectedModelObjects[0].props && ctx.mbomContext.selectedModelObjects[0].props && ctx.ebomContext.selectedModelObjects.length >= 1  && ctx.mbomContext.selectedModelObjects.length === 1 && ctx.ebomContext.topElementSelected !== true && ctx.mbomContext.topElementSelected !== true && ctx.ebomContext.ebomPartSelected !== true && ctx.ebomContext.ebomParentChildSelected !== true"
      },
      "isTypeOfAwb0PositionedElementSelectedInEbom": {
        "expression": "ctx.ebomContext.selectedModelObjects[0].modelType && ctx.ebomContext.selectedModelObjects[0].modelType.typeHierarchyArray.indexOf('Awb0PositionedElement') > -1 "
      },
      "isTypeOfAwb0PositionedElementSelectedInMbom": {
        "expression": "ctx.mbomContext.selectedModelObjects[0].modelType && ctx.mbomContext.selectedModelObjects[0].modelType.typeHierarchyArray.indexOf('Awb0PositionedElement') > -1 "
      },
      "mbmOpenWPInNewTabOrWindowCmdCondition": {
        "expression": "(conditions.mbmCCObjectOpenBaseVisibleCondition && !ctx.aw_hosting_enabled)"
      },
      "isMbomContext": {
        "expression": "conditions.IsValidWorkspaceSelected && commandContext.viewKey === 'mbomContext'"
      },
      "isEbomContext": {
        "expression": "conditions.IsValidWorkspaceSelected && commandContext.viewKey === 'ebomContext'"
      },
      "assignFromEbomToMbomCommandEnable": {
        "expression": "conditions.isTypeOfAwb0PositionedElementSelectedInEbom && conditions.isTypeOfAwb0PositionedElementSelectedInMbom && commandContext.viewKey === 'mbomContext' && ctx.ebomContext.selectedModelObjects.length > 0 &&  ctx.mbomContext.selectedModelObjects.length ===1 && !ctx.ebomContext.isGreyedOutElementSelected && !ctx.mbomContext.isGreyedOutElementSelected"
      },
      "assignFromEbomToMbomCommandVisible": {
        "expression": "conditions.isMbomContext && (ctx.preferences.MBMEnableBOMFiltering[0]!=='true' || conditions.isFocusCommandSelect)"
      },
      "mbmRemoveCommandEnable": {
        "expression": "commandContext.viewKey === 'mbomContext' && !ctx[commandContext.viewKey].isGreyedOutElementSelected && ctx.mbomContext.selectedModelObjects.length > 1 || (ctx.mbomContext.selectedModelObjects.length ===1 && ctx.mbomContext.selectedModelObjects[0].props.awb0Parent.dbValues[0] != null && !ctx[commandContext.viewKey].isGreyedOutElementSelected)"
      },
      "mbmRemoveCommandVisible": {
        "expression": "conditions.isMbomContext"
      },
      "addMfgPartOrMfgAssemblyCommandEnable": {
        "expression": "conditions.isAddChildCommandSupported && conditions.isTypeOfAwb0PositionedElementSelectedInMbom && commandContext.viewKey === 'mbomContext' && ctx.mbomContext.selectedModelObjects.length ===1 && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "IsValidWorkspaceSelected": {
        "expression": "ctx.workspace.availablePages.includes('multiBOMManager') && ctx.workspace.workspaceType === 'Exclusive'"
      },
      "isEBOMorMbomContext": {
        "expression": "commandContext.viewKey === 'ebomContext'||commandContext.viewKey === 'mbomContext'"
      },
      "isMbmExpandCommandEnable": {
        "expression": "conditions.isEBOMorMbomContext && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "isMbmValidateEffectivityCommandVisible": {
        "expression": "conditions.isEbomContext && ctx.preferences.MBMEnableEffectivityValidation[0] === 'true' && (ctx.preferences.MBMEnableBOMFiltering[0]!=='true' || conditions.isFocusCommandSelect)"
      },
      "isMbmValidateEffectivityCommandEnable": {
        "expression": "commandContext.viewKey === 'ebomContext' && ctx.ebomContext.selectedModelObjects.length === 1 && ctx.ebomContext.selectedModelObjects[0].props.awb0IsPacked.dbValues[0]==='0' && ctx.ebomContext.selectedModelObjects[0].props.awb0Parent.dbValues[0] != null && !ctx.ebomContext.isGreyedOutElementSelected"
      },
      "isMbmMbomTreeTableEditable": {
        "expression": "conditions.isMbomContext && ctx.mbomDataProvider && ctx.mbomDataProvider.canStartEdit() && !ctx.mbomDataProvider.editInProgress()"
      },
      "isMbmMbomTreeTableEditCommandEnable": {
        "expression": "conditions.isMbomContext && ctx.mbomDataProvider && ctx.mbomDataProvider.canStartEdit() && !ctx.mbomDataProvider.editInProgress() && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "isMbmOnDemandComparePreference": {
        "expression": "conditions.IsValidWorkspaceSelected && ctx.preferences.MBMOnDemandCompare[0] === 'true'"
      },
      "isEbomSideLayoutSelected": {
        "expression": "!ctx.mbmAlignmentState.ebomContext.showGraphicsInBottom && ctx.mbmAlignmentState.ebomContext.showGraphics && ctx.ebomContext.fullscreen !== true"
      },
      "isEbomBottomLayoutSelected": {
        "expression": "ctx.mbmAlignmentState.ebomContext.showGraphicsInBottom && ctx.mbmAlignmentState.ebomContext.showGraphics && ctx.ebomContext.fullscreen !== true"
      },
      "isEbomGraphicsInFullScreen": {
        "expression": "ctx.ebomContext.fullscreen !== true"
      },
      "isMbomGraphicsInFullScreen": {
        "expression": "ctx.mbomContext.fullscreen !== true"
      },
      "isMbomSideLayoutSelected": {
        "expression": "!ctx.mbmAlignmentState.mbomContext.showGraphicsInBottom && ctx.mbmAlignmentState.mbomContext.showGraphics"
      },
      "isMbomBottomLayoutSelected": {
        "expression": "ctx.mbmAlignmentState.mbomContext.showGraphicsInBottom && ctx.mbmAlignmentState.mbomContext.showGraphics"
      },
      "isMbmMbomTreeTableEditInProgress": {
        "expression": "conditions.isMbomContext && ctx.mbomDataProvider && ctx.mbomDataProvider.editInProgress()"
      },
      "mbmChangeImpactCommandCondition": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.IsValidWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "ctx.selected.modelType.typeHierarchyArray",
              "$query": {
                "$in": [
                  "ChangeNoticeRevision"
                ]
              }
            }
          ]
        }
      },
      "isMbmPackAllCmdActive": {
        "expression": "ctx[commandContext.viewKey].supportedFeatures.Awb0PackSimilarElementsFeature && !ctx[commandContext.viewKey].supportedFeatures['4GStructureFeature'] && commandContext.viewKey === 'ebomContext'||commandContext.viewKey === 'mbomContext'"
      },
      "isMbmPackAllCmdVisible": {
        "expression": "(ctx.tcSessionData.tcMajorVersion>=12 && ctx.tcSessionData.tcMinorVersion>=4) || (ctx.tcSessionData.tcMajorVersion>=13)"
      },
      "isMbmUnpackAllCmdActive": {
        "expression": "ctx[commandContext.viewKey].supportedFeatures.Awb0PackSimilarElementsFeature && !ctx[commandContext.viewKey].supportedFeatures['4GStructureFeature'] && commandContext.viewKey === 'ebomContext'||commandContext.viewKey === 'mbomContext'"
      },
      "isMbmUnpackAllCmdVisible": {
        "expression": "(ctx.tcSessionData.tcMajorVersion>=12 && ctx.tcSessionData.tcMinorVersion>=4) || (ctx.tcSessionData.tcMajorVersion>=13)"
      },
      "isMbmAssociateChangeNoticeValid": {
        "expression": "conditions.IsValidWorkspaceSelected && commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects.length===1 && (commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects[0].props.mbm0AssociatedActiveCNs.dbValues.indexOf (ctx.mbmChangeNotice.contextObject.uid) < 0) && ctx.mbmChangeNotice.contextObject.props.is_modifiable.dbValues[0] === '1' "
      },
      "isReviseCmdActive": {
        "expression": "conditions.IsValidWorkspaceSelected && conditions.isMbomContext"
      },
      "mbmReviseCommandEnable": {
        "expression": "conditions.isTypeOfAwb0PositionedElementSelectedInMbom && ctx.mbomContext.selectedModelObjects.length > 0 && !ctx[commandContext.viewKey].isGreyedOutElementSelected && (ctx.mbomContext.selectedObjectsUids.indexOf(ctx.mbomContext.topElement.uid) < 0 || conditions.isMbomContentItemOrBomView)"
      },
      "isAlignCmdActive": {
        "expression": "conditions.IsValidWorkspaceSelected &&  conditions.isMbomContext"
      },
      "mbmAlignCommandEnable": {
        "expression": " ctx.ebomContext.selectedModelObjects[0].props && ctx.mbomContext.selectedModelObjects[0].props && ctx.ebomContext.ebomPartSelected !== true && ctx.mbomContext.mbomPartSelected !== true && ctx.ebomContext.topElementSelected !== true && ctx.mbomContext.topElementSelected !== true && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "isMbomContentItemOrBomView": {
        "expression": "ctx.epPageContext.mbomStructureContent && (ctx.epPageContext.mbomStructureContent.modelType.typeHierarchyArray.indexOf('Item') > -1 || ctx.epPageContext.mbomStructureContent.modelType.typeHierarchyArray.indexOf('PSBOMView') > -1)"
      },
      "isMbmSubmitToWorkflowCmdActive": {
        "expression": "conditions.IsValidWorkspaceSelected && conditions.isMbomContext"
      },
      "mbmSubmitToWorkflowCommandEnable": {
        "expression": "conditions.isTypeOfAwb0PositionedElementSelectedInMbom && ctx.mbomContext.selectedModelObjects.length >0 && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "mbmCheckCommandsEnable": {
        "expression": " ctx.mbomContext.selectedModelObjects.length > 0 && ctx.mbomContext.selectedObjectsUids.indexOf(ctx.mbomContext.topElement.uid) < 0 && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "mbmCheckoutVisibility": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isMbomContext",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "ctx.visibleServerCommands.Awp0Checkout",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": {
                "$adapt": "ctx.mselected"
              },
              "$query": {
                "$source": "props.owning_site.dbValues.0.length",
                "$query": {
                  "$isNull": true
                }
              }
            }
          ]
        }
      },
      "mbmCheckinVisibility": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isMbomContext",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "ctx.visibleServerCommands.Awp0Checkin",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": {
                "$adapt": "ctx.mselected"
              },
              "$query": {
                "$source": "props.owning_site.dbValues.0.length",
                "$query": {
                  "$isNull": true
                }
              }
            }
          ]
        }
      },
      "mbmCancelCheckoutVisibility": {
        "expression": "conditions.isMbomContext && ctx.visibleServerCommands.Awp0CancelCheckout === true"
      },
      "mbm3DViewerFullScreenCmdCondition": {
        "expression": "conditions.IsValidWorkspaceSelected && ctx.locationContext['ActiveWorkspace:SubLocation']==='multiBOMManager:taskPageSubLocation' && !ctx[commandContext.svInstance.occmgmtContextNameKey].fullscreen"
      },
      "mbm3DViewerExitFullScreenCmdCondition": {
        "expression": "conditions.IsValidWorkspaceSelected && ctx.locationContext['ActiveWorkspace:SubLocation']==='multiBOMManager:taskPageSubLocation' && ctx[commandContext.svInstance.occmgmtContextNameKey].fullscreen === true"
      },
      "mbmMbom3DExitFullScreenCmdCondition": {
        "expression": "conditions.IsValidWorkspaceSelected &&  ctx.mbomContext.fullscreen === true"
      },
      "mbmHide3DViewerCmdCondition": {
        "expression": "conditions.IsValidWorkspaceSelected &&  ctx.mbmAlignmentState[commandContext.viewKey].showGraphics"
      },
      "mbmShowEbom3DViewerCmdCondition": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.mbmAlignmentState[commandContext.viewKey].showGraphics && conditions.isEbomContext"
      },
      "mbmShowMbom3DViewerCmdCondition": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.mbmAlignmentState[commandContext.viewKey].showGraphics && conditions.isMbomContext"
      },
      "mbmPullPropagationCommandEnable": {
        "expression": "conditions.IsValidWorkspaceSelected && ctx.mbomContext.mismatchSelected===true"
      },
      "mbmPullPropagationCommandVisible": {
        "expression": "conditions.isMbomContext && (ctx.preferences.MBMEnableBOMFiltering[0]!=='true' || conditions.isFocusCommandSelect)"
      },
      "mbmCompareCommandEnable": {
        "expression": "conditions.IsValidWorkspaceSelected  && ctx[commandContext.viewKey].selectedModelObjects.length ===1 && [ 2, 6, 8, 58 ].indexOf(ctx.mbmAssignmentAndMismatchContext[commandContext.viewKey].differences[ctx[commandContext.viewKey].selectedModelObjects[0].uid].status)>-1 && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "isMbmAlignmentPage": {
        "expression": "ctx.locationContext['ActiveWorkspace:SubLocation']==='multiBOMManager:taskPageSubLocation' && ctx.sublocation.nameToken === 'multiBOMManager:taskPageSubLocation' && ctx.sublocation.nameToken !== 'manageWorkPackageNewSubLocation'"
      },
      "mbmUpdateAssignmentDomainCmdVisibility": {
        "expression": "ctx.tcSessionData.tcMajorVersion>=14 && ctx.tcSessionData.tcMinorVersion>=1 && ctx.tcSessionData.tcQRMNumber>=1  && ctx.tcSessionData.phaseVersion>=12  && ctx.preferences.MBMEnableBOMFiltering[0] === 'true' && conditions.isUnFocusCommandSelect && ctx.ebomContext.topElementSelected !== true &&  !ctx.ebomContext.ebomPartSelected && ctx.ebomContext.selectedModelObjects.length ===1 "
      },
      "mbmCompareCommandVisible": {
        "expression": "conditions.isMbomContext && (ctx.preferences.MBMEnableBOMFiltering[0]!=='true' || conditions.isFocusCommandSelect)"
      },
      "isMbmPackCmdActive": {
        "expression": "conditions.IsValidWorkspaceSelected && conditions.isMbmAlignmentPage"
      },
      "isMbmPackCmdEnable": {
        "expression": "ctx.mselected[0].props.awb0Parent.dbValues[0] != null  && ctx[commandContext.viewKey].supportedFeatures.Awb0PackSimilarElementsFeature"
      },
      "isMbmUnpackCmdActive": {
        "expression": "conditions.IsValidWorkspaceSelected && conditions.isMbmAlignmentPage"
      },
      "isMbmUnpackCmdEnable": {
        "expression": "ctx.mselected[0].props.awb0IsPacked.dbValues[0]==='1' && ctx[commandContext.viewKey].supportedFeatures.Awb0PackSimilarElementsFeature"
      },
      "mbmEffectivityCommandEnable": {
        "expression": "conditions.isMbomContext && ctx.mbomContext.selectedModelObjects.length > 0 && ctx.mbomContext.selectedModelObjects[0].props.awb0Parent.dbValues[0] != null&& ctx.mbomContext.topElementSelected !== true && !ctx[commandContext.viewKey].isGreyedOutElementSelected"
      },
      "mbmEffectivityCommandVisible": {
        "expression": "conditions.isMbomContext"
      },
      "mbmFindInEbomCommandEnable": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.mbomContext.isGreyedOutElementSelected"
      },
      "mbmFindInMbomCommandEnable": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.ebomContext.isGreyedOutElementSelected"
      },
      "mbmEnableCutCommand": {
        "expression": "conditions.IsValidWorkspaceSelected && !ctx.mbomContext.isGreyedOutElementSelected && ctx.mbomContext.selectedModelObjects.length > 0"
      },
      "isManageWPPageInMbmWorkspace": {
        "expression": {
          "$and": [
            {
              "$source": "ctx.ep.scopeObject.modelType.typeHierarchyArray",
              "$query": {
                "$in": [
                  "MECollaborationContext"
                ]
              }
            },
            {
              "$source": "conditions.IsValidWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isMbmWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isManageWorkPackageNewSubLocationSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isMbmWorkspaceSelected": {
        "expression": {
          "$source": "ctx.workspace.workspaceId",
          "$query": {
            "$in": [
              "MbmWorkspace"
            ]
          }
        }
      },
      "isEbomMbomExist": {
        "expression": "ctx.epPageContext.MbomStructureContext && ctx.epPageContext.EbomStructureContext"
      },
      "isMbmEnableBOMFiltering": {
        "expression": "conditions.isMbomContext && ctx.preferences.MBMEnableBOMFiltering[0] === 'true'"
      },
      "isFocusCommandEnable": {
        "expression": "(conditions.isMbomContext && ctx.mbmEnableFocus === true) || ctx.mbmFocusModeSelected === true"
      },
      "isFocusCommandSelect": {
        "expression": "ctx.mbmFocusModeSelected === true"
      },
      "isUnFocusCommandSelect": {
        "expression": "ctx.mbmFocusModeSelected === false || !ctx.mbmFocusModeSelected"
      },
      "mbmEvaluateForCheckoutCondition": {
        "expression": "ctx.preferences.MBMCheckoutCheckForFocus[0] === 'true' && (!ctx.mbmFocusModeSelected || ctx.mbmFocusModeSelected === false)"
      },
      "mbmToggleFocusCommandCondition": {
        "expression": "!ctx.preferences.MBMCheckoutCheckForFocus[0] || ctx.preferences.MBMCheckoutCheckForFocus[0] === false || conditions.isFocusCommandSelect || !data.mbomCheckoutInfo || data.mbomCheckoutInfo.allSelectionsCheckedOutByCurrentUser"
      },
      "mbmPasteAfterCutCommandVisible": {
        "expression": "conditions.IsValidWorkspaceSelected && ctx.mbomContext.areElementsCut === true"
      },
      "mbmPasteAfterCopyCommandVisible": {
        "expression": "conditions.IsValidWorkspaceSelected && ctx.mbomContext.areElementsCut === false"
      },
      "isCreateMCNVisible": {
        "expression": "conditions.IsValidWorkspaceSelected && conditions.isSplitChangeNoticeEnabledForMBOM"
      },
      "isAssociateCNVisible": {
        "expression": "conditions.IsValidWorkspaceSelected && !conditions.isSplitChangeNoticeEnabledForMBOM"
      },
      "isCreateMCNEnabled": {
        "expression": "conditions.IsValidWorkspaceSelected && conditions.isSplitChangeNoticeEnabledForMBOM && commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects.length===1"
      },
      "isAssociateCNEnabled": {
        "expression": "conditions.isMbmAssociateChangeNoticeValid && !conditions.isSplitChangeNoticeEnabledForMBOM"
      },
      "isSplitChangeNoticeEnabledForMBOM": {
        "expression": "ctx.preferences.EP_SplitChangeNotice && ctx.preferences.EP_SplitChangeNotice[0] === 'MBOM'"
      },
      "isActiveMCN": {
        "expression": "data.activeMcns && data.activeMcns.length > 0"
      },
      "noActiveMCN": {
        "expression": "!conditions.isActiveMCN"
      },
      "ETOOpenWpCmdCondition": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.mbmOpenWpCmdCondition",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isETOWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isChangesNoticePageSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isETOWorkspaceSelected": {
        "expression": {
          "$source": "ctx.workspace.workspaceId",
          "$query": {
            "$in": [
              "WIWorkspace"
            ]
          }
        }
      },
      "mbmXcShareCommandEnable": {
        "expression": "commandContext.objectSetTitleKey === 'tc_xrt_Files' && commandContext.dataProvider.selectedObjects.length === 1 && (ctx.mselected[0].modelType.typeHierarchyArray.indexOf('Dataset') > -1)"
      },
      "wiOpenWpCmdCondition": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.mbmOpenWpCmdCondition",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isETOWorkspaceSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isChangesNoticePageSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isChangesNoticePageSelected": {
        "expression": {
          "$or": [
            {
              "$source": "ctx.pselected.modelType.typeHierarchyArray",
              "$query": {
                "$in": [
                  "ChangeNoticeRevision"
                ]
              }
            },
            {
              "$source": "ctx.selected.modelType.typeHierarchyArray",
              "$query": {
                "$in": [
                  "ChangeNoticeRevision"
                ]
              }
            }
          ]
        }
      },
      "mbmTaskbarFullScreenCmdCondition": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.isMBMAlignmentSelected",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.Awp0TaskbarFullScreenCmdCondition",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "mbmTaskbarExitFullScreenCmdCondition": {
        "expression": {
          "$and": [
            {
              "$source": "conditions.Awp0TaskbarExitFullScreenCmdCondition",
              "$query": {
                "$eq": true
              }
            },
            {
              "$source": "conditions.isMBMAlignmentSelected",
              "$query": {
                "$eq": true
              }
            }
          ]
        }
      },
      "isPagehasTrackingChanges": {
        "expression": "ctx.state.params.tracking_cn && ctx.state.params.tracking_cn !== ''"
      },
      "isNotMbmAlignmentPage": {
        "expression": "ctx.locationContext['ActiveWorkspace:SubLocation']!=='multiBOMManager:taskPageSubLocation'"
      },
      "isMbmFindCmdEnable": {
        "expression": "ctx[commandContext.viewKey].selectedModelObjects.length === 1 && ctx[commandContext.viewKey].selectedModelObjects[0].props.awb0IsPacked.dbValues[0]==='0'  && ! ctx[commandContext.viewKey].isGreyedOutElementSelected "
      },
      "enableMbmNotificationCommandCond": {
        "expression": "commandContext.group.groupName==='MBM'"
      },
      "mbmXrtIncludeXcShareCommand": {
        "expression": "commandContext.xrtCommands['com.teamcenter.rac.common.XShare'] && conditions.isMbmAlignmentPage"
      },
      "mbmXrtIncludeAwp0ReplaceDatasetCommand": {
        "expression": "commandContext.xrtCommands['com.teamcenter.rac.common.ReplaceDataset'] && conditions.isMbmAlignmentPage"
      },
      "hasValidationInput": {
        "expression": " ctx.epValidationContext.epValidationInput.inputObject.length > 0 "
      },
      "isMbmclientScopeURI": {
        "expression": "ctx.sublocation.clientScopeURI==='Mbm0MbomManagement' || ctx.sublocation.clientScopeURI==='Mbm0EbomManagement'"
      },
      "isUseSubstituteCmdVisibleInMBM": {
        "expression": " conditions.isMbmclientScopeURI && commandContext.objectSetSource==='Awb0SubstitutesProvider.ItemRevision' && ctx.visibleServerCommands.Awb0UseSubstitute && !ctx.hiddenCommands.Awb0UseSubstitute"
      },
      "isAddSubstitutesCmdVisibleInMBM": {
        "expression": "conditions.isMbmclientScopeURI && commandContext.objectSetSource==='Awb0SubstitutesProvider.ItemRevision'"
      },
      "isRemoveSubstitutesCmdVisibleInMBM": {
        "expression": "conditions.isMbmclientScopeURI && commandContext.objectSetSource==='Awb0SubstitutesProvider.ItemRevision' && ctx.visibleServerCommands.Awb0RemoveSubstitutes && !ctx.hiddenCommands.Awb0RemoveSubstitutes"
      }
    },
    "messages": {
      "mbmWorkPackageOpenFailureMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmEbomMbomNotLinked}}",
        "messageTextParams": [
          "{{data.workPackageInfo.workPackage.props.object_string.uiValues[0]}}"
        ]
      },
      "mbmAssignmentUpdateSuccessMessage": {
        "messageType": "INFO",
        "messageText": "{{i18n.mbmAssignmentUpdateSuccess}}"
      },
      "removeSingleFromMbom": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmRemoveSingleConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Remove",
            "text": "{{i18n.aceRemove}}",
            "action": "mbmRemoveElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.mbomContext.calculatedSelectedObjects[0].props.object_string.uiValues[0]}}"
        ]
      },
      "removeAssignmentScope": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmRemoveScopeConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Remove",
            "text": "{{i18n.aceRemove}}",
            "action": "mbmRemoveScopeCommandAction"
          }
        ],
        "messageTextParams": [
          "{{data.evaluatedRemoveScopeObject.assignmentScopeInfo.targetObject.props.mbm0AssignmentDomain.uiValues[0]}}"
        ]
      },
      "removeMultipleFromMbomExcludingRoot": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmRemoveMultipleConfirmationExcludingParent}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Remove",
            "text": "{{i18n.mbmRemoveExcludingParent}}",
            "action": "mbmPerformRemove"
          }
        ],
        "messageTextParams": [
          "{{ctx.mbomContext.topElement.props.object_string.uiValues[0]}}"
        ]
      },
      "removeMultiplefromMbom": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmRemoveMultipleConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Remove",
            "text": "{{i18n.aceRemove}}",
            "action": "mbmRemoveElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.mbomContext.calculatedSelectedObjects.length}}"
        ]
      },
      "AlignSingleFromEbomAndMbom": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmAlignSingleFromEbomAndMbomConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Align",
            "text": "{{i18n.mbmAlignButton}}",
            "action": "mbmAlignElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.ebomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}",
          "{{ctx.mbomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}"
        ]
      },
      "AlignMultipleFromEbomAndSingleFromMbom": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmAlignMultipleFromEbomAndSingleFromMbomConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Align",
            "text": "{{i18n.mbmAlignButton}}",
            "action": "mbmAlignElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.ebomContext.selectedModelObjects.length}}",
          "{{ctx.mbomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}"
        ]
      },
      "AlignSingleFromEbomAndMultipleFromMbom": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmAlignSingleFromEbomAndMultipleFromMbomConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Align",
            "text": "{{i18n.mbmAlignButton}}",
            "action": "mbmAlignElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.ebomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}",
          "{{ctx.mbomContext.selectedModelObjects.length}}"
        ]
      },
      "AlignMultipleFromEbomAndMultipleFromMbom": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmAlignMultipleFromEbomAndMultipleFromMbomConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Align",
            "text": "{{i18n.mbmAlignButton}}",
            "action": "mbmAlignElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.ebomContext.selectedModelObjects.length}}",
          "{{ctx.mbomContext.selectedModelObjects.length}}"
        ]
      },
      "mbmCheckoutByAnotherSingleUserMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFocusErrorCheckedOutBySingle}}",
        "navigationOptions": [
          {
            "option": "Close",
            "text": "{{i18n.close}}"
          }
        ],
        "messageTextParams": [
          "{{data.mbomCheckoutInfo.singleSelectionCheckoutInfo.objectName}}",
          "{{data.mbomCheckoutInfo.singleSelectionCheckoutInfo.checkedOutUser}}"
        ]
      },
      "mbmCheckoutByAnotherMultipleUserMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFocusErrorCheckedOutByMultiple}}",
        "navigationOptions": [
          {
            "option": "Close",
            "text": "{{i18n.close}}"
          }
        ]
      },
      "mbmCheckoutAndFocusSingleUserMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmCheckoutBeforeFocusSingleConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "CheckoutAndFocus",
            "text": "{{i18n.mbmCheckoutAndFocus}}",
            "action": "mbmCheckoutAndFocusBatchAction"
          }
        ],
        "messageTextParams": [
          "{{data.mbomCheckoutInfo.singleSelectionCheckoutInfo.objectName}}"
        ]
      },
      "mbmCheckoutAndFocusMultipleUserMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmCheckoutBeforeFocusMultipleConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "CheckoutAndFocus",
            "text": "{{i18n.mbmCheckoutAndFocus}}",
            "action": "mbmCheckoutAndFocusBatchAction"
          }
        ]
      },
      "mbmNoImpactedworkPackageMessage": {
        "messageType": "INFO",
        "messageText": "{{i18n.mbmNoImpactedworkPackageMessage}}"
      },
      "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithCN": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithCN}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "noAssociationContinue",
            "text": "{{i18n.mbmContinueWithoutTrackingButtonTitle}}",
            "action": "mbmNavigateToMbmAlignmentPage"
          },
          {
            "option": "associationContinue ",
            "text": "{{i18n.mbmAssociateAndContinueButtonTitle}}",
            "action": "mbmAssociateAndActivateChangeNoticeAction"
          }
        ],
        "messageTextParams": [
          "{{data.mbmEvaluationInfo.workpackage.props.object_string.uiValues[0]}}",
          "{{data.mbmEvaluationInfo.ecn.props.object_string.uiValues[0]}}"
        ]
      },
      "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithMCN": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithMCN}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "noAssociationContinue",
            "text": "{{i18n.mbmContinueWithoutTrackingButtonTitle}}",
            "action": "mbmNavigateToMbmAlignmentPage"
          }
        ],
        "messageTextParams": [
          "{{data.mbmEvaluationInfo.workpackage.props.object_string.uiValues[0]}}",
          "{{data.mbmEvaluationInfo.workpackage.props.object_string.uiValues[0]}}"
        ]
      },
      "mbmConfirmMessageforNavigateAssociatedWorkpackageAndReadonlyCN": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmConfirmMessageforNavigateReadonlyCNWorkpackage}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "continue",
            "text": "{{i18n.mbmContinueWithoutTrackingButtonTitle}}",
            "action": "mbmNavigateToMbmAlignmentPageWithCNAction"
          }
        ],
        "messageTextParams": [
          "{{data.mbmEvaluationInfo.ecn.props.object_string.uiValues[0]}}"
        ]
      },
      "mbmConfirmMessageforNavigateReadonlyCNWorkpackage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmConfirmMessageforNavigateReadonlyCNWorkpackage}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "continue",
            "text": "{{i18n.mbmContinueWithoutTrackingButtonTitle}}",
            "action": "mbmNavigateToMbmAlignmentPage"
          }
        ],
        "messageTextParams": [
          "{{data.mbmEvaluationInfo.ecn.props.object_string.uiValues[0]}}"
        ]
      },
      "reviseFailureMsg": {
        "messageType": "ERROR",
        "messageText": "{{i18n.reviseFailureMessage}}",
        "messageTextParams": [
          "{{ctx.mselected[0].props.object_string.uiValues}}"
        ]
      },
      "mbmReviseFailureMsg": {
        "messageType": "ERROR",
        "messageText": "{{errorCode}}"
      },
      "mbmPullPropagateOverAssigneConfirmMessagesingle": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmOverAssignedAdditionalPropagateMessage}}",
        "messageTextParams": [
          "{{ctx.mbomContext.selectedModelObjects[0].props.awb0Archetype.uiValues[0]}}"
        ],
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "propagateAll",
            "text": "{{i18n.mbmPropagateAll}}",
            "action": "performPropagateChange"
          }
        ]
      },
      "mbmPullPropagateOverAssigneConfirmMessagemultiple": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmOverAssignedAdditionalPropagateMessagemultiple}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "propagateAll",
            "text": "{{i18n.mbmPropagateAll}}",
            "action": "performPropagateChange"
          }
        ]
      },
      "mbmPullPropagateOutofScopeConfirmMessagesingle": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmOverAssignedNotAllInScopeAdditionalPropagateMessage}}",
        "messageTextParams": [
          "{{ctx.mbomContext.selectedModelObjects[0].props.awb0Archetype.uiValues[0]}}"
        ],
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "propagateAll",
            "text": "{{i18n.mbmPropagateAll}}",
            "action": "performPropagateChange"
          }
        ]
      },
      "mbmPullPropagateOutofScopeConfirmMessagemultiple": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmOverAssignedNotAllInScopeAdditionalPropagateMessageMultiple}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "propagateAll",
            "text": "{{i18n.mbmPropagateAll}}",
            "action": "performPropagateChange"
          }
        ]
      },
      "mbmFindInEbomPartialMissingPartMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFindInEBomPackedPartialMissingPart}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}"
          }
        ]
      },
      "mbmFindInEbomNotFoundPartMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFindInEbomNotFound}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "partialCompareInUnfocusModeMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.partialCompareInUnfocusMode}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "partialCompareInvalidEBOMMultiSelectMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.partialCompareInvalidEBOMMultiSelect}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "partialCompareInvalidMBOMMultiSelectMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.partialCompareInvalidMBOMMultiSelect}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "partialCompareInvalidEBOMSingleSelectMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.partialCompareInvalidEBOMSingleSelect}}",
        "messageTextParams": [
          "{{ctx.ebomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}"
        ],
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "partialCompareInvalidMBOMSingleSelectMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.partialCompareInvalidMBOMSingleSelect}}",
        "messageTextParams": [
          "{{ctx.mbomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}"
        ],
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "mbmFindInMbomNotFoundPartMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFindInPartNotAssigned}}",
        "messageTextParams": [
          "{{ctx.ebomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}"
        ],
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "mbmPartialAssignOccMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFindInEBomPackedPartialMissingPart}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "mbmEbomPartialAssignOccMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmFindInMBomPackedPartialMissingPart}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmClose}}"
          }
        ]
      },
      "mbmFindInEbomUnpackedPartMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmFindInEbomUnpackedPart}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "continue",
            "text": "{{i18n.mbmFindOccurrence}}",
            "action": "mbmFindInEbomUpackedConfirmation"
          }
        ]
      },
      "mbmFindInMbomUnpackedPartMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmFindInMbomPackedIssuePart}}",
        "navigationOptions": [
          {
            "option": "close",
            "text": "{{i18n.mbmCancel}}"
          },
          {
            "option": "continue",
            "text": "{{i18n.mbmFindOccurrence}}",
            "action": "mbmFindInUpackedConfirmation"
          }
        ]
      },
      "showMCNErrorMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.activeMcnExist}}",
        "messageTextParams": [
          "{{commandContext.dataProviders.impactedWpTableDataProvider.selectedObjects[0].props.object_string.displayValues[0]}}"
        ]
      },
      "showMCNNotExistErrorMessage": {
        "messageType": "ERROR",
        "messageText": "{{i18n.activeMcnNotExist}}",
        "messageTextParams": [
          "{{data.trackingCN.props.object_string.uiValues[0]}}"
        ]
      },
      "showReviseConfirmationMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmReviseElementConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Revise",
            "text": "{{i18n.mbmReviseCommandToolTip}}",
            "action": "mbmRevisePreProcessAction"
          }
        ],
        "messageTextParams": [
          "{{ctx.mbomContext.selectedModelObjects[0].props.object_string.uiValues[0]}}"
        ]
      },
      "showReviseMultipleElementsConfirmationMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmReviseMultipleElementsConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "Revise",
            "text": "{{i18n.mbmReviseCommandToolTip}}",
            "action": "mbmRevisePreProcessAction"
          }
        ],
        "messageTextParams": [
          "{{ctx.mbomContext.selectedModelObjects.length}}"
        ]
      },
      "mbmConfirmMessageforCompareEBOMandMBOM": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmUpdateAssignmentIndicationsConfirmationMessage}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "compareEbomAndMbom",
            "text": "{{i18n.mbmUpdateAssignmentIndications}}",
            "action": "mbmperformCompare"
          }
        ]
      },
      "mbmFailureMessage": {
        "messageType": "ERROR",
        "messageText": "{{errorCode}}"
      },
      "mbmAlignSuccessMessage": {
        "messageType": "INFO",
        "messageText": "{{i18n.mbmAssembliesAlignedSuccessMessage}}"
      },
      "assignFromEbomToMbomInBackgroundMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmAssignFromEbomToMbomInBackgroundConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "AssignInBackground",
            "text": "{{i18n.mbmAssignInBackground}}",
            "action": "mbmAssignFromEbomToMbomAction"
          }
        ],
        "messageTextParams": [
          "{{ctx.preferences.MBMMinimumLimitForBackgoundMode[0]}}"
        ]
      },
      "RemoveInBackgroundMessage": {
        "messageType": "WARNING",
        "messageText": "{{i18n.mbmRemoveEbomFromMbomInBackgroundConfirmation}}",
        "navigationOptions": [
          {
            "option": "Cancel",
            "text": "{{i18n.cancel}}"
          },
          {
            "option": "RemoveInBackground",
            "text": "{{i18n.mbmRemoveInBackground}}",
            "action": "mbmRemoveElements"
          }
        ],
        "messageTextParams": [
          "{{ctx.preferences.MBMMinimumLimitForBackgoundMode[0]}}"
        ]
      },
      "RemoveMessageExcludingRoot": {
        "messageType": "ERROR",
        "messageText": "{{i18n.mbmRootSelectedToMove}}"
      }
    },
    "i18n": {
      "mbmAlignEBOMMBOMTitle": [
        "mbmMessages"
      ],
      "openInMbmAlignPageTitle": [
        "mbmMessages"
      ],
      "openInMbmAlignPageDesc": [
        "mbmMessages"
      ],
      "mbmAlignEBOMMBOMTileDescription": [
        "mbmMessages"
      ],
      "mbmAlignEBOMMBOMTileCriteria": [
        "mbmMessages"
      ],
      "mbmEbomMbomNotLinked": [
        "mbmMessages"
      ],
      "assignFromEbomToMbomCommandTitle": [
        "mbmMessages"
      ],
      "assignFromEbomToMbomCommandToolTipDescription": [
        "mbmMessages"
      ],
      "mbmRemoveSingleConfirmation": [
        "mbmMessages"
      ],
      "mbmRemoveMultipleConfirmation": [
        "mbmMessages"
      ],
      "mbmRemoveMultipleConfirmationExcludingParent": [
        "mbmMessages"
      ],
      "mbmRemoveExcludingParent": [
        "mbmMessages"
      ],
      "addMfgPartOrMfgAssemblyCommandTitle": [
        "mbmMessages"
      ],
      "addMfgPartOrMfgAssemblyCommandToolTipDescription": [
        "mbmMessages"
      ],
      "mbmPackUnpackGroupTitle": [
        "mbmMessages"
      ],
      "mbmManufacturingImpact": [
        "mbmMessages"
      ],
      "mbmNoImpactedworkPackageMessage": [
        "mbmMessages"
      ],
      "mbmAssociateChangeNoticeTitle": [
        "mbmMessages"
      ],
      "mbmAssociateAndContinueButtonTitle": [
        "mbmMessages"
      ],
      "mbmContinueWithoutTrackingButtonTitle": [
        "mbmMessages"
      ],
      "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithCN": [
        "mbmMessages"
      ],
      "mbmConfirmMessageforNavigateNotAssociatedWorkpackageWithMCN": [
        "mbmMessages"
      ],
      "mbmConfirmMessageforNavigateReadonlyCNWorkpackage": [
        "mbmMessages"
      ],
      "mbmReviseCommandToolTip": [
        "mbmMessages"
      ],
      "mbmAlignCommandTitle": [
        "mbmMessages"
      ],
      "mbmAlignCommandDesc": [
        "mbmMessages"
      ],
      "mbmAlignCommandtext": [
        "mbmMessages"
      ],
      "mbmAlignButton": [
        "mbmMessages"
      ],
      "mbmAlignSingleFromEbomAndMbomConfirmation": [
        "mbmMessages"
      ],
      "mbmAlignMultipleFromEbomAndSingleFromMbomConfirmation": [
        "mbmMessages"
      ],
      "mbmAlignSingleFromEbomAndMultipleFromMbomConfirmation": [
        "mbmMessages"
      ],
      "mbmAlignMultipleFromEbomAndMultipleFromMbomConfirmation": [
        "mbmMessages"
      ],
      "reviseFailureMessage": [
        "TCUICommandPanelsMessages"
      ],
      "mbmAssociateCnWpPopupTitle": [
        "mbmMessages"
      ],
      "mbmShowSummaryTitle": [
        "mbmMessages"
      ],
      "mbmShowEbomSummaryCommandTooltipDescription": [
        "mbmMessages"
      ],
      "mbmShowMbomSummaryCommandTooltipDescription": [
        "mbmMessages"
      ],
      "mbmHideSummaryCommandTitle": [
        "mbmMessages"
      ],
      "mbmHideSummaryCommandTooltipDescription": [
        "mbmMessages"
      ],
      "mbmUpdateInMbom": [
        "mbmMessages"
      ],
      "mbmCompareToEbom": [
        "mbmMessages"
      ],
      "mbmUpdateInMbomTooltip": [
        "mbmMessages"
      ],
      "mbmCompareToEbomTooltip": [
        "mbmMessages"
      ],
      "mbmComparePopupTitle": [
        "mbmMessages"
      ],
      "mbmOverAssignedAdditionalPropagateMessage": [
        "mbmMessages"
      ],
      "mbmOverAssignedAdditionalPropagateMessagemultiple": [
        "mbmMessages"
      ],
      "mbmOverAssignedNotAllInScopeAdditionalPropagateMessage": [
        "mbmMessages"
      ],
      "mbmOverAssignedNotAllInScopeAdditionalPropagateMessageMultiple": [
        "mbmMessages"
      ],
      "mbmPropagateAll": [
        "mbmMessages"
      ],
      "mbmCancel": [
        "mbmMessages"
      ],
      "mbmFindInEBOM": [
        "mbmMessages"
      ],
      "updateEquivalentAssignmentDomainsTitle": [
        "mbmMessages"
      ],
      "updateEquivalentAssignmentDomainsDesc": [
        "mbmMessages"
      ],
      "mbmAssignmentUpdateSuccess": [
        "mbmMessages"
      ],
      "mbmStructureSearchMbomPanelTitle": [
        "mbmMessages"
      ],
      "mbmFindInParentAssembly": [
        "mbmMessages"
      ],
      "mbmFindParentAssembly": [
        "mbmMessages"
      ],
      "mbmFindInEbomNotFound": [
        "mbmMessages"
      ],
      "mbmFindInMbomPackedIssuePart": [
        "mbmMessages"
      ],
      "mbmClose": [
        "mbmMessages"
      ],
      "mbmFindInEBomPackedPartialMissingPart": [
        "mbmMessages"
      ],
      "mbmFindInMBomPackedPartialMissingPart": [
        "mbmMessages"
      ],
      "mbmFindInEbomUnpackedPart": [
        "mbmMessages"
      ],
      "mbmContinue": [
        "mbmMessages"
      ],
      "mbmFindOccurrence": [
        "mbmMessages"
      ],
      "elementEffectivityTitle": [
        "OccurrenceManagementConstants"
      ],
      "Awb0OccurrenceEffectivityDesc": [
        "OccurrenceManagementConstants"
      ],
      "mbmFocusOffCommandTitle": [
        "mbmMessages"
      ],
      "mbmFocusOnCommandTitle": [
        "mbmMessages"
      ],
      "mbmCreateMCNCommandTitle": [
        "mbmMessages"
      ],
      "mbmCreateMCNPopupTitle": [
        "mbmMessages"
      ],
      "activeMcnExist": [
        "mbmMessages"
      ],
      "activeMcnNotExist": [
        "mbmMessages"
      ],
      "mbmScopeCommandTitle": [
        "mbmMessages"
      ],
      "mbmScopeCommandDesc": [
        "mbmMessages"
      ],
      "mbmRemoveScopeCommandTitle": [
        "mbmMessages"
      ],
      "mbmRemoveScopeCommandDesc": [
        "mbmMessages"
      ],
      "mbmRemoveScopeConfirmation": [
        "mbmMessages"
      ],
      "moreCommandTitle": [
        "mbmMessages"
      ],
      "mbmWorkInstructionPage": [
        "mbmMessages"
      ],
      "mbmManufacturingImpactTooltipDescription": [
        "mbmMessages"
      ],
      "openProcessInWIAuthoringPopupTitle": [
        "mbmMessages"
      ],
      "mbmValidateEffectivityTitle": [
        "mbmMessages"
      ],
      "mbmValidateEffectivityDesc": [
        "mbmMessages"
      ],
      "mbmValidateEffectivityPopupSubHeader": [
        "mbmMessages"
      ],
      "mbmPartYetNotAssigned": [
        "mbmMessages"
      ],
      "mbmFindInPartNotAssigned": [
        "mbmMessages"
      ],
      "mbmEbomRangeRowTitle": [
        "mbmMessages"
      ],
      "handleMismatchTitle": [
        "mbmMessages"
      ],
      "manageTitle": [
        "mbmMessages"
      ],
      "assignmentScopeTitle": [
        "mbmMessages"
      ],
      "InContextSearchTitle": [
        "mbmMessages"
      ],
      "InContextSearchDesc": [
        "mbmMessages"
      ],
      "Awp0ShowObjectTitle": [
        "ShowObjectMessages"
      ],
      "mbmReviseElementConfirmation": [
        "mbmMessages"
      ],
      "mbmReviseMultipleElementsConfirmation": [
        "mbmMessages"
      ],
      "mbm3DBottomLayoutCommandTitle": [
        "mbmMessages"
      ],
      "mbm3DBottomLayoutCommandDesc": [
        "mbmMessages"
      ],
      "mbm3DSideLayoutCommandTitle": [
        "mbmMessages"
      ],
      "mbm3DSideLayoutCommandDesc": [
        "mbmMessages"
      ],
      "mbmFocusErrorCheckedOutBySingle": [
        "mbmMessages"
      ],
      "mbmFocusErrorCheckedOutByMultiple": [
        "mbmMessages"
      ],
      "mbmCheckoutBeforeFocusSingleConfirmation": [
        "mbmMessages"
      ],
      "mbmCheckoutBeforeFocusMultipleConfirmation": [
        "mbmMessages"
      ],
      "mbmCheckoutAndFocus": [
        "mbmMessages"
      ],
      "mbmCopyPaste": [
        "mbmMessages"
      ],
      "mbmPasteDesc": [
        "mbmMessages"
      ],
      "mbmPasteAsRefDesc": [
        "mbmMessages"
      ],
      "mbmCutDesc": [
        "mbmMessages"
      ],
      "mbmCopyDesc": [
        "mbmMessages"
      ],
      "mbmAssignFromEbomToMbomInBackgroundConfirmation": [
        "mbmMessages"
      ],
      "mbmRemoveEbomFromMbomInBackgroundConfirmation": [
        "mbmMessages"
      ],
      "mbmRootSelectedToMove": [
        "mbmMessages"
      ],
      "mbmAssignInBackground": [
        "mbmMessages"
      ],
      "mbmRemoveInBackground": [
        "mbmMessages"
      ],
      "mbmRemove": [
        "mbmMessages"
      ],
      "saveas": [
        "mbmMessages"
      ],
      "CreateBasedOnTitle": [
        "mbmMessages"
      ],
      "mbmCreateBasedOnTooltipDescription": [
        "mbmMessages"
      ],
      "mbmCreateMfgPartOrMfgAssemblyCommandTitle": [
        "mbmMessages"
      ],
      "mbmUpdateAssignmentIndicationsConfirmationMessage": [
        "mbmMessages"
      ],
      "mbmUpdateAssignmentIndications": [
        "mbmMessages"
      ],
      "mbmAssembliesAlignedSuccessMessage": [
        "mbmMessages"
      ],
      "mbmPartialCompareTitle": [
        "mbmMessages"
      ],
      "mbmPartialCompareTooltipDescription": [
        "mbmMessages"
      ],
      "partialCompareInvalidEBOMSingleSelect": [
        "mbmMessages"
      ],
      "partialCompareInvalidMBOMSingleSelect": [
        "mbmMessages"
      ],
      "partialCompareInvalidEBOMMultiSelect": [
        "mbmMessages"
      ],
      "partialCompareInvalidMBOMMultiSelect": [
        "mbmMessages"
      ],
      "partialCompareInUnfocusMode": [
        "mbmMessages"
      ]
    }
  },
  "layoutSlots": {
    "slots": {
      "mbmPrimaryWorkAreaCommandBarSlot": {
        "name": "aw_pwaCommandBar",
        "view": "mbmPrimaryWorkAreaToolbar",
        "activeWhen": {
          "condition": "conditions.isOnAlignEbomMbomPage"
        }
      },
      "mbmEpIndicationbarSlot": {
        "name": "mfe_taskbarLeftSlot",
        "view": "mbmTaskBar",
        "activeWhen": {
          "condition": "conditions.isOnAlignEbomMbomPage"
        }
      },
      "showTaskMBMHeaderPage": {
        "name": "ep_taskNavigation",
        "view": "epHeaderMBMPageName",
        "activeWhen": {
          "condition": "conditions.isMbmWorkspaceSelected"
        }
      }
    },
    "conditions": {
      "isOnAlignEbomMbomPage": {
        "expression": "ctx.sublocation.nameToken==='multiBOMManager:taskPageSubLocation'"
      },
      "isMbmWorkspaceSelected": {
        "expression": "ctx.workspace.workspaceId==='MbmWorkspace' && ctx.sublocation.nameToken==='multiBOMManager:taskPageSubLocation'"
      }
    }
  },
  "paste": {
    "schemaVersion": "1.0.0",
    "pasteHandlers": {
      "mbmpasteHandler": {
        "action": "mbmDefaultPasteAction",
        "activeWhen": {
          "condition": "conditions.isPasteHandlerActiveFormbm"
        }
      }
    },
    "actions": {
      "mbmDefaultPasteAction": {
        "actionType": "JSFunction",
        "method": "moveMbomParts",
        "deps": "js/mbmAssignPartsHandler",
        "inputData": {
          "sourceObject": "{{pasteContext.sourceObject}}",
          "targetObject": "{{pasteContext.targetObject}}",
          "actionType": "Move"
        }
      }
    },
    "conditions": {
      "isPasteHandlerActiveFormbm": {
        "expression": {
          "$and": [
            {
              "$source": "ctx.splitView.viewKeys",
              "$query": {
                "$in": [
                  "ebomContext"
                ]
              }
            },
            {
              "$source": "ctx.splitView.viewKeys",
              "$query": {
                "$in": [
                  "mbomContext"
                ]
              }
            },
            {
              "$source": "pasteContext.targetObject.modelType.typeHierarchyArray",
              "$query": {
                "$in": [
                  "Awb0PositionedElement"
                ]
              }
            },
            {
              "$source": "pasteContext.sourceObject",
              "$query": {
                "$all": {
                  "$source": "modelType.typeHierarchyArray",
                  "$query": {
                    "$in": [
                      "Awb0ConditionalElement"
                    ]
                  }
                }
              }
            },
            {
              "$source": "ctx.mbmTreeContextKeys",
              "$query": {
                "$in": [
                  "ebomTree"
                ]
              }
            },
            {
              "$source": "ctx.mbmTreeContextKeys",
              "$query": {
                "$in": [
                  "mbomTree"
                ]
              }
            },
            {
              "$source": "ctx.sublocation.clientScopeURI",
              "$query": {
                "$eq": "Mbm0MbomManagement"
              }
            },
            {
              "$or": [
                {
                  "$and": [
                    {
                      "$source": "pasteContext.targetObject",
                      "$query": {
                        "$typeOf": "Awb0PositionedElement"
                      }
                    },
                    {
                      "$or": [
                        {
                          "$source": "pasteContext.sourceObject",
                          "$query": {
                            "$typeOf": "Awb0PartElement"
                          }
                        },
                        {
                          "$source": "pasteContext.sourceObject",
                          "$query": {
                            "$typeOf": "Ase0LogicalElement"
                          }
                        },
                        {
                          "$source": "pasteContext.sourceObject",
                          "$query": {
                            "$typeOf": "Awb0PositionedElement"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "$and": [
                    {
                      "$source": "pasteContext.targetObject",
                      "$query": {
                        "$typeOf": "Awb0PartElement"
                      }
                    },
                    {
                      "$or": [
                        {
                          "$source": "pasteContext.sourceObject",
                          "$query": {
                            "$typeOf": "Awb0PartElement"
                          }
                        },
                        {
                          "$source": "pasteContext.sourceObject",
                          "$query": {
                            "$typeOf": "Ase0LogicalElement"
                          }
                        },
                        {
                          "$source": "pasteContext.sourceObject",
                          "$query": {
                            "$typeOf": "Awb0PositionedElement"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }
  },
  "propertyRendererTemplates": {
    "mbmEbomAssignmentColumn_template": {
      "grids": [
        "ebomTreeTable"
      ],
      "columns": [
        "assignmentIndication"
      ],
      "renderFunction": "getAssignmentIndicationRenderer",
      "deps": "js/mbmAlignmentTablePropertyRenderer"
    },
    "mbmEbomMismatchtColumn_template": {
      "grids": [
        "ebomTreeTable"
      ],
      "columns": [
        "mismatchIndication"
      ],
      "renderFunction": "getMismatchIndicationRenderer",
      "deps": "js/mbmAlignmentTablePropertyRenderer"
    },
    "mbmEbomMfgRepresentationColumn_template": {
      "grids": [
        "ebomTreeTable"
      ],
      "columns": [
        "mfgRepresentation"
      ],
      "renderFunction": "getMfgRepresentationRenderer",
      "deps": "js/mbmAlignmentTablePropertyRenderer"
    },
    "mbmMbomMismatchtOrMissingColumn_template": {
      "grids": [
        "mbomTreeTable"
      ],
      "columns": [
        "mismatchOrMissingIndication"
      ],
      "renderFunction": "getMismatchOrMissingIndicationRenderer",
      "deps": "js/mbmAlignmentTablePropertyRenderer"
    },
    "columnHeader_template": {
      "grids": [
        "ebomTreeTable",
        "mbomTreeTable"
      ],
      "columns": [
        "assignmentIndication",
        "mismatchIndication",
        "mismatchOrMissingIndication",
        "mfgRepresentation"
      ],
      "headerTemplateUrl": "/propRenderTemplates/columnHeaderRenderer.html"
    },
    "mbmChangeNoticeWorkpackage_template": {
      "grids": [
        "impactedWpTable"
      ],
      "columns": [
        "object_string"
      ],
      "templateUrl": "",
      "renderFunction": "getChangeNoticeWorkpackageRenderer",
      "deps": "js/mbmCnTablePropertyRenderer"
    },
    "mbmChangeNoticeStatus_template": {
      "grids": [
        "impactedWpTable"
      ],
      "columns": [
        "cnStatusIndication"
      ],
      "templateUrl": "",
      "renderFunction": "getChangeNoticeStatusRenderer",
      "deps": "js/mbmCnTablePropertyRenderer"
    },
    "mbmImpactedWpTableColumnText_template": {
      "grids": [
        "impactedWpTable"
      ],
      "columns": [
        "owning_user",
        "mbm0EBOM",
        "mbm0MBOM",
        "mbm0AssociatedActiveCNs"
      ],
      "templateUrl": "",
      "renderFunction": "getColumnTextRenderer",
      "deps": "js/mbmCnTablePropertyRenderer"
    },
    "mbc0AssociatedProcessesColumn_template": {
      "grids": [
        "mbomTreeTable"
      ],
      "columns": [
        "mbc0AssociatedProcesses"
      ],
      "renderFunction": "getAssociatedProcessesRenderer",
      "deps": "js/mbmAlignmentTablePropertyRenderer"
    }
  },
  "states": {
    "taskPageRoot": {
      "abstract": true,
      "data": {},
      "view": "commonLocation",
      "parent": "root"
    },
    "multiBOMManager": {
      "type": "subLocation",
      "url": "/multiBOMManager",
      "parent": "easyplan",
      "abstract": false,
      "controller": "mbmPageController",
      "dependencies": [
        "js/mbmPage.Controller"
      ],
      "params": {
        "cmdArg": {
          "array": true
        },
        "tracking_cn": null,
        "impacting_cn": null,
        "cc_uid": null,
        "mcn_uid": null,
        "pci_uid": null,
        "pci_uid2": null
      },
      "reloadOnSearch": false,
      "templateUrl": "/html/mbmPage.html"
    }
  },
  "syncStrategy": {
    "schemaVersion": "1.0.0",
    "syncStrategies": {
      "syncFromMbomTreeToOverview": {
        "source": {
          "view": "mbomTree",
          "port": "mbmMbomSingleSelectObjectPort"
        },
        "target": {
          "view": "mbm_mbomOverviewTab",
          "port": "epInformation_inputObject"
        }
      },
      "syncFromEbomTreeToOverview": {
        "source": {
          "view": "ebomTree",
          "port": "mbmEbomSingleSelectObjectPort"
        },
        "target": {
          "view": "mbm_ebomOverviewTab",
          "port": "epInformation_inputObject"
        }
      },
      "syncFromAssignmentStateToggleToCSP": {
        "source": {
          "view": "MbmAssignmentStateToggle",
          "port": "mbmAssignmentStateSelectionPort"
        },
        "target": {
          "view": "mbmChangeSummary",
          "port": "mbmCSPCompareStatusPort"
        }
      },
      "configurationUpdateByPanelToMbmView": {
        "source": {
          "view": "EpStructureConfigurationFilter",
          "port": "epUpdatedConfigurationPort"
        },
        "target": {
          "view": "mbm",
          "port": "updateConfigurationObject"
        }
      },
      "syncStrategyEpValidationResultTableToMbomTree": {
        "source": {
          "view": "epValidationResultTable",
          "port": "epValidationResultTable_selectedObjects"
        },
        "target": {
          "view": "mbmValidationNodeSyncManager",
          "port": "mfeSyncManager_setSyncObject"
        }
      }
    },
    "syncStrategyHandlers": {
      "syncFromMbomTreeToOverviewHandler": {
        "id": "syncFromMbomTreeToOverview",
        "activeWhen": true
      },
      "syncFromEbomTreeToOverviewHandler": {
        "id": "syncFromEbomTreeToOverview",
        "activeWhen": true
      },
      "syncFromAssignmentStateToggleToCSPHandler": {
        "id": "syncFromAssignmentStateToggleToCSP",
        "activeWhen": true
      },
      "syncStrategyConfigurationPanelToMbmHandler": {
        "id": "configurationUpdateByPanelToMbmView",
        "activeWhen": true
      },
      "syncStrategyEpValidationResultTableToMbomTreeHandler": {
        "id": "syncStrategyEpValidationResultTableToMbomTree",
        "activeWhen": true
      }
    }
  }
}
